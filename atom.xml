<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Coder Cool !</title>
  <subtitle>Coder Just Cool !</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://coderdotcool.github.io/"/>
  <updated>2017-05-12T15:19:47.000Z</updated>
  <id>https://coderdotcool.github.io/</id>
  
  <author>
    <name>codercool</name>
    <email>codercool@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS Animations 笔记</title>
    <link href="https://coderdotcool.github.io/Notes/iOS-Animations-%E7%AC%94%E8%AE%B0.html"/>
    <id>https://coderdotcool.github.io/Notes/iOS-Animations-笔记.html</id>
    <published>2016-06-15T01:33:11.000Z</published>
    <updated>2017-05-12T15:19:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>对iOS的动画相关的方面单独做了一下整理，以后有时间会持续更新…</p>
<a id="more"></a>
<h1 id="View-动画"><a href="#View-动画" class="headerlink" title="View 动画"></a>View 动画</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">0.5</span>, animations: &#123;</div><div class="line">	<span class="keyword">self</span>.heading.center.x += <span class="keyword">self</span>.view.bounds.width</div><div class="line">&#125;)</div><div class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">0.5</span>, delay: <span class="number">0.3</span>, options: [], animations: &#123;</div><div class="line">	<span class="keyword">self</span>.username.center.x += <span class="keyword">self</span>.view.bounds.width</div><div class="line">&#125;, completion: <span class="literal">nil</span>)</div><div class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">0.5</span>, delay: <span class="number">0.4</span>, options: [], animations: &#123;</div><div class="line">	<span class="keyword">self</span>.password.center.x += <span class="keyword">self</span>.view.bounds.width</div><div class="line">&#125;, completion: <span class="literal">nil</span>)</div></pre></td></tr></table></figure>
<h2 id="可做动画的属性"><a href="#可做动画的属性" class="headerlink" title="可做动画的属性"></a>可做动画的属性</h2><h3 id="Position-and-size"><a href="#Position-and-size" class="headerlink" title="Position and size"></a>Position and size</h3><ul>
<li>bounds</li>
<li>frame</li>
<li>center</li>
</ul>
<h3 id="Appearance"><a href="#Appearance" class="headerlink" title="Appearance"></a>Appearance</h3><ul>
<li><p>backgroundColor</p>
</li>
<li><p>alpha</p>
</li>
</ul>
<p>###Transformation</p>
<ul>
<li>transform</li>
</ul>
<h2 id="动画-options"><a href="#动画-options" class="headerlink" title="动画 options"></a>动画 options</h2><h3 id="Repeating"><a href="#Repeating" class="headerlink" title="Repeating"></a>Repeating</h3><ul>
<li><code>.Repeat</code> 使你的动画永远循环重复</li>
<li><code>.Autoreverse</code> 这个选项只能和 <code>.Repeat</code> 一起使用，正向反向的重复动画</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">0.5</span>, delay: <span class="number">0.4</span>, options: [.<span class="type">Repeat</span>, .<span class="type">Autoreverse</span>], animations: &#123;</div><div class="line">	<span class="keyword">self</span>.password.center.x += <span class="keyword">self</span>.view.bounds.width </div><div class="line">&#125;, completion: <span class="literal">nil</span>)</div></pre></td></tr></table></figure>
<h3 id="Easing"><a href="#Easing" class="headerlink" title="Easing"></a>Easing</h3><ul>
<li><code>.Linear</code> :线性</li>
<li><code>.CurveEaseIn</code> : 动画开始时，加速</li>
<li><code>.CurveEaseOut</code> : 动画结束时，减速</li>
<li><code>.CurveEaseInOut</code> : 动画开始时，加速，并且，动画结束时，减速</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">0.5</span>, delay: <span class="number">0.4</span>, options: [.<span class="type">Repeat</span>, .<span class="type">Autoreverse</span>, .<span class="type">CurveEaseOut</span>], animations: &#123;</div><div class="line">	<span class="keyword">self</span>.password.center.x += <span class="keyword">self</span>.view.bounds.width </div><div class="line">&#125;, completion: <span class="literal">nil</span>)</div></pre></td></tr></table></figure>
<h3 id="Springs"><a href="#Springs" class="headerlink" title="Springs"></a>Springs</h3><ul>
<li><strong>usingSpringWithDamping</strong> : 弹簧动画的阻尼值，也就是相当于摩擦力的大小，该属性的值从0.0到1.0之间，越靠近0，阻尼越小，弹动的幅度越大，反之阻尼越大，弹动的幅度越小，如果大道一定程度，会出现弹不动的情况。</li>
</ul>
<ul>
<li><strong>initialSpringVelocity</strong> : 弹簧动画的速率，或者说是动力。值越小弹簧的动力越小，弹簧拉伸的幅度越小，反之动力越大，弹簧拉伸的幅度越大。这里需要注意的是，如果设置为0，表示忽略该属性，由动画持续时间和阻尼计算动画的效果。</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">0.5</span>, delay: <span class="number">0.5</span>, usingSpringWithDamping: <span class="number">0.5</span>, initialSpringVelocity: <span class="number">0.0</span>, options: [], animations: &#123;</div><div class="line">	<span class="keyword">self</span>.loginButton.center.y -= <span class="number">30.0</span></div><div class="line">	<span class="keyword">self</span>.loginButton.alpha = <span class="number">1.0</span> </div><div class="line">&#125;, completion: <span class="literal">nil</span>)</div></pre></td></tr></table></figure>
<h2 id="Transitions"><a href="#Transitions" class="headerlink" title="Transitions"></a>Transitions</h2><h3 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h3><ul>
<li><code>.TransitionFlipFromLeft</code></li>
</ul>
<ul>
<li><code>.TransitionFlipFromRight</code></li>
</ul>
<ul>
<li><code>.TransitionCurlUp</code></li>
<li><code>.TransitionCurlDown</code></li>
<li><code>.TransitionCrossDissolve</code></li>
<li><code>.TransitionFlipFromTop</code></li>
<li><code>.TransitionFlipFromBottom</code></li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//添加一个新 view，需要更改 view 的层次，transition 需要 container view</span></div><div class="line"><span class="type">UIView</span>.transitionWithView(animationContainerView!, duration: <span class="number">0.33</span>, options: [.<span class="type">CurveEaseOut</span>, .<span class="type">TransitionFlipFromBottom</span>], animations: &#123;</div><div class="line">	<span class="keyword">self</span>.animationContainerView!.addSubview(newView) </div><div class="line">&#125;, completion: <span class="literal">nil</span>) </div><div class="line"></div><div class="line"><span class="comment">//remove the view via transition</span></div><div class="line"><span class="type">UIView</span>.transitionWithView(animationContainerView!, duration: <span class="number">0.33</span>,  doptions: [.<span class="type">CurveEaseOut</span>, .<span class="type">TransitionFlipFromBottom</span>], animations: &#123;</div><div class="line">	<span class="keyword">self</span>.newView.removeFromSuperview() </div><div class="line">&#125;, completion: <span class="literal">nil</span>)</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//显示隐藏 view，无需更改 view 的层次，transition 无需 container view</span></div><div class="line"><span class="comment">//hide the view via transition</span></div><div class="line"><span class="type">UIView</span>.transitionWithView(<span class="keyword">self</span>.newView, duration: <span class="number">0.33</span>, options: [.<span class="type">CurveEaseOut</span>, .<span class="type">TransitionFlipFromBottom</span>], animations: &#123;</div><div class="line">	<span class="keyword">self</span>.newView.hidden = <span class="literal">true</span> </div><div class="line">&#125;, completion: <span class="literal">nil</span>)</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//替换 view</span></div><div class="line"><span class="comment">//replace via transition</span></div><div class="line"><span class="type">UIView</span>.transitionFromView(<span class="keyword">self</span>.oldView!, toView: <span class="keyword">self</span>.newView!, duration: <span class="number">0.33</span>, options: [.<span class="type">TransitionFlipFromTop</span>],</div><div class="line">completion: <span class="literal">nil</span>)</div></pre></td></tr></table></figure>
<h2 id="关键帧动画"><a href="#关键帧动画" class="headerlink" title="关键帧动画"></a>关键帧动画</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> originalCenter = planeImage.center</div><div class="line"><span class="type">UIView</span>.animateKeyframesWithDuration(<span class="number">1.5</span>, delay: <span class="number">0.0</span>, options: [], animations: &#123;</div><div class="line">	<span class="comment">//add keyframes</span></div><div class="line">	<span class="type">UIView</span>.addKeyframeWithRelativeStartTime(<span class="number">0.0</span>, </div><div class="line">	relativeDuration: <span class="number">0.25</span>,  </div><div class="line">	animations: &#123;</div><div class="line">                    <span class="keyword">self</span>.planeImage.center.x += <span class="number">80.0</span></div><div class="line">                    <span class="keyword">self</span>.planeImage.center.y -= <span class="number">10.0</span></div><div class="line">                &#125;)</div><div class="line">                </div><div class="line">    <span class="type">UIView</span>.addKeyframeWithRelativeStartTime(<span class="number">0.1</span>, </div><div class="line">    relativeDuration: <span class="number">0.4</span>) &#123;</div><div class="line">                    <span class="keyword">self</span>.planeImage.transform = </div><div class="line">                    <span class="type">CGAffineTransformMakeRotation</span>(<span class="type">CGFloat</span>(-<span class="type">M_PI_4</span>/<span class="number">2</span>))</div><div class="line">                &#125;</div><div class="line">            </div><div class="line">    <span class="type">UIView</span>.addKeyframeWithRelativeStartTime(<span class="number">0.25</span>, </div><div class="line">    relativeDuration: <span class="number">0.25</span>) &#123;</div><div class="line">                    <span class="keyword">self</span>.planeImage.center.x += <span class="number">100.0</span></div><div class="line">                    <span class="keyword">self</span>.planeImage.center.y -= <span class="number">50.0</span></div><div class="line">                    <span class="keyword">self</span>.planeImage.alpha = <span class="number">0.0</span></div><div class="line">                &#125;</div><div class="line">            </div><div class="line">    <span class="type">UIView</span>.addKeyframeWithRelativeStartTime(<span class="number">0.51</span>, </div><div class="line">    relativeDuration: <span class="number">0.01</span>) &#123;</div><div class="line">                    <span class="keyword">self</span>.planeImage.transform = <span class="type">CGAffineTransformIdentity</span></div><div class="line">                    <span class="keyword">self</span>.planeImage.center = <span class="type">CGPoint</span>(x: <span class="number">0.0</span>, y: originalCenter.y)</div><div class="line">                &#125;</div><div class="line">            </div><div class="line">    <span class="type">UIView</span>.addKeyframeWithRelativeStartTime(<span class="number">0.55</span>, </div><div class="line">    relativeDuration: <span class="number">0.45</span>) &#123; </div><div class="line">    				<span class="keyword">self</span>.planeImage.alpha = <span class="number">1.0</span></div><div class="line">                    <span class="keyword">self</span>.planeImage.center = originalCenter</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">&#125;, completion: <span class="literal">nil</span>)</div></pre></td></tr></table></figure>
<h1 id="Auto-Layout"><a href="#Auto-Layout" class="headerlink" title="Auto Layout"></a>Auto Layout</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">isMenuOpen = !isMenuOpen</div><div class="line">    </div><div class="line"><span class="keyword">for</span> constraint <span class="keyword">in</span> titleLabel.superview!.constraints &#123;</div><div class="line">	<span class="comment">//循环约束，找出相应的所需的约束</span></div><div class="line">  	<span class="keyword">if</span> constraint.firstItem <span class="keyword">as</span>? <span class="type">NSObject</span> == titleLabel &amp;&amp;</div><div class="line">  	constraint.firstAttribute == .<span class="type">CenterX</span> &#123;</div><div class="line">  		constraint.constant = isMenuOpen ? -<span class="number">100.0</span> : <span class="number">0.0</span></div><div class="line">  		<span class="keyword">continue</span></div><div class="line">  	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//menuHeightConstraint 为 Menu 的 高度约束</span></div><div class="line">menuHeightConstraint.constant = isMenuOpen ? <span class="number">200.0</span> : <span class="number">60.0</span></div><div class="line">titleLabel.text = isMenuOpen ? <span class="string">"Select Item"</span> : <span class="string">"Packing List"</span></div><div class="line">    </div><div class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">1.0</span>, delay: <span class="number">0.0</span>, usingSpringWithDamping: <span class="number">0.4</span>, initialSpringVelocity: <span class="number">10.0</span>, options: .<span class="type">CurveEaseIn</span>, animations: &#123;</div><div class="line">			<span class="comment">//调用 layoutIfNeeded 更新约束，更新布局，产生动画</span></div><div class="line">            <span class="keyword">self</span>.view.layoutIfNeeded()</div><div class="line">        &#125;, completion: <span class="literal">nil</span>)</div></pre></td></tr></table></figure>
<p>属性 <code>constant</code> 是 <code>NSLayoutConstraint</code> 类中仅有的可变的属性（mutable property），若要修改 <code>multiplier</code> 或修改为另一个约束，则需要删除这个约束再增加一个新的约束（replace）</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">isMenuOpen = !isMenuOpen</div><div class="line">    </div><div class="line"><span class="keyword">for</span> constraint <span class="keyword">in</span> titleLabel.superview!.constraints &#123;</div><div class="line">  	<span class="keyword">if</span> constraint.firstItem <span class="keyword">as</span>? <span class="type">NSObject</span> == titleLabel &amp;&amp;</div><div class="line">  	constraint.firstAttribute == .<span class="type">CenterX</span> &#123;</div><div class="line">  		constraint.constant = isMenuOpen ? -<span class="number">100.0</span> : <span class="number">0.0</span></div><div class="line">  		<span class="keyword">continue</span></div><div class="line">  	&#125;</div><div class="line">  	</div><div class="line">  	<span class="comment">//通过标识符找到对应所需的约束</span></div><div class="line">  	<span class="keyword">if</span> constraint.identifier == <span class="string">"TitleCenterY"</span> &#123;</div><div class="line">  		<span class="comment">//通过将约束的 active 设为 false 来删除此约束，如果没有引用指向这个约束，这个约束对象将从内存中删除</span></div><div class="line">  		constraint.active = <span class="literal">false</span></div><div class="line">    	<span class="comment">//add new constraint</span></div><div class="line">    	<span class="keyword">let</span> newConstraint = <span class="type">NSLayoutConstraint</span>(</div><div class="line">                item: titleLabel,</div><div class="line">                attribute: .<span class="type">CenterY</span>,</div><div class="line">                relatedBy: .<span class="type">Equal</span>,</div><div class="line">                toItem: titleLabel.superview!,</div><div class="line">                attribute: .<span class="type">CenterY</span>,</div><div class="line">                multiplier: isMenuOpen ? <span class="number">0.67</span> : <span class="number">1.0</span>,</div><div class="line">                constant: <span class="number">5.0</span>)</div><div class="line">            </div><div class="line">        newConstraint.identifier = <span class="string">"TitleCenterY"</span></div><div class="line">        <span class="comment">//通过设置 newConstraint 的属性 active 为 true，来通知 Auto Layout 应用新的约束(newConstraint)</span></div><div class="line">        newConstraint.active = <span class="literal">true</span></div><div class="line">        </div><div class="line">    	<span class="keyword">continue</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">menuHeightConstraint.constant = isMenuOpen ? <span class="number">200.0</span> : <span class="number">60.0</span></div><div class="line">titleLabel.text = isMenuOpen ? <span class="string">"Select Item"</span> : <span class="string">"Packing List"</span></div><div class="line">    </div><div class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">1.0</span>, delay: <span class="number">0.0</span>, usingSpringWithDamping: <span class="number">0.4</span>, initialSpringVelocity: <span class="number">10.0</span>, options: .<span class="type">CurveEaseIn</span>, animations: &#123;</div><div class="line">            <span class="keyword">self</span>.view.layoutIfNeeded()</div><div class="line">        &#125;, completion: <span class="literal">nil</span>)</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">showItem</span><span class="params">(index: Int)</span></span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"tapped item <span class="subst">\(index)</span>"</span>)</div><div class="line">    <span class="keyword">let</span> imageView = <span class="type">UIImageView</span>(image: <span class="type">UIImage</span>(named: <span class="string">"summericons_100px_0<span class="subst">\(index)</span>.png"</span>))</div><div class="line">    imageView.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">0.0</span>, green: <span class="number">0.0</span>, blue: <span class="number">0.0</span>, alpha: <span class="number">0.5</span>)</div><div class="line">    imageView.layer.cornerRadius = <span class="number">5.0</span></div><div class="line">    </div><div class="line">    imageView.layer.masksToBounds = <span class="literal">true</span></div><div class="line">    imageView.translatesAutoresizingMaskIntoConstraints = <span class="literal">false</span></div><div class="line">    view.addSubview(imageView)</div><div class="line">    </div><div class="line">    <span class="comment">//iOS 9.0 之后，约束的新用法</span></div><div class="line">    <span class="keyword">let</span> conX = imageView.centerXAnchor.constraintEqualToAnchor( view.centerXAnchor)</div><div class="line">    <span class="keyword">let</span> conBottom = imageView.bottomAnchor.constraintEqualToAnchor( view.bottomAnchor, constant: imageView.frame.height)</div><div class="line">    <span class="keyword">let</span> conWidth = imageView.widthAnchor.constraintEqualToAnchor( view.widthAnchor,multiplier: <span class="number">0.33</span>,constant: -<span class="number">50.0</span>)</div><div class="line">    <span class="keyword">let</span> conHeight = imageView.heightAnchor.constraintEqualToAnchor( imageView.widthAnchor)</div><div class="line">    </div><div class="line">    <span class="type">NSLayoutConstraint</span>.activateConstraints([conX, conBottom, conWidth, conHeight])</div><div class="line">    </div><div class="line">    <span class="comment">//使约束生效，作为后面动画的初始状态，这样后面的动画才会正常</span></div><div class="line">    view.layoutIfNeeded()</div><div class="line">    </div><div class="line">    <span class="type">UIView</span>.animateWithDuration(<span class="number">0.8</span>, delay: <span class="number">0.0</span>, usingSpringWithDamping: <span class="number">0.4</span>, initialSpringVelocity: <span class="number">0.0</span>, options: [], animations: &#123;</div><div class="line">            conBottom.constant = -imageView.frame.size.height/<span class="number">2</span></div><div class="line">            conWidth.constant = <span class="number">0.0</span></div><div class="line">            <span class="keyword">self</span>.view.layoutIfNeeded()</div><div class="line">        &#125;, completion: <span class="literal">nil</span>)</div><div class="line">    </div><div class="line">    <span class="type">UIView</span>.animateWithDuration(<span class="number">0.8</span>, delay: <span class="number">1.0</span>,usingSpringWithDamping: <span class="number">0.4</span>, initialSpringVelocity: <span class="number">0.0</span>,options: [], animations: &#123;</div><div class="line">            conBottom.constant = imageView.frame.size.height</div><div class="line">            conWidth.constant = -<span class="number">50.0</span></div><div class="line">            <span class="keyword">self</span>.view.layoutIfNeeded()</div><div class="line">        &#125;, completion: &#123;<span class="number">_</span> <span class="keyword">in</span></div><div class="line">            imageView.removeFromSuperview()</div><div class="line">        &#125;)</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h1 id="Layer-动画"><a href="#Layer-动画" class="headerlink" title="Layer 动画"></a>Layer 动画</h1><p>能用 View 动画时就用 View 动画，但当需要更多性能与灵活性是，可以考虑用 Layer 动画</p>
<table>
<thead>
<tr>
<th>Views</th>
<th>Layers</th>
</tr>
</thead>
<tbody>
<tr>
<td>复杂的View层次布局，Auto Layout 等</td>
<td>简单的层次，更快的布局，更快的绘制</td>
</tr>
<tr>
<td>用户交互</td>
<td>没有响应事件链的开销</td>
</tr>
<tr>
<td>经常在CPU主线程上执行自定义逻辑和自定义绘制代码</td>
<td>默认没有自定义逻辑。经常有缓存，在GPU上直接绘制</td>
</tr>
<tr>
<td>非常灵活，强大，有很多子类</td>
<td>不灵活，很少子类</td>
</tr>
</tbody>
</table>
<h2 id="可做动画的属性-1"><a href="#可做动画的属性-1" class="headerlink" title="可做动画的属性"></a>可做动画的属性</h2><h3 id="Position-and-size-1"><a href="#Position-and-size-1" class="headerlink" title="Position and size"></a>Position and size</h3><ul>
<li>bounds</li>
<li>position</li>
<li>transform</li>
</ul>
<h3 id="Border"><a href="#Border" class="headerlink" title="Border"></a>Border</h3><ul>
<li>borderColor</li>
<li>borderWidth</li>
<li>cornerRadius</li>
</ul>
<h3 id="Shadow"><a href="#Shadow" class="headerlink" title="Shadow"></a>Shadow</h3><ul>
<li>shadowOffset</li>
<li>shadowOpacity</li>
<li>shadowPath</li>
<li>shadowRadius</li>
</ul>
<h3 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h3><ul>
<li>contents</li>
<li>mask</li>
<li>opacity</li>
</ul>
<p>以上可动画的属性只是一部分，<code>CALayer</code>的子类另外也有很多可动画的属性</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//CABasicAnimation 只是一个数据模型，没有局限于具体的 layer</span></div><div class="line"><span class="keyword">let</span> flyRight = <span class="type">CABasicAnimation</span>(keyPath: <span class="string">"position.x"</span>)</div><div class="line">flyRight.fromValue = -view.bounds.size.width/<span class="number">2</span></div><div class="line">flyRight.toValue = view.bounds.size.width/<span class="number">2</span></div><div class="line">flyRight.duration = <span class="number">0.5</span></div><div class="line"></div><div class="line">heading.layer.addAnimation(flyRight, forKey: <span class="literal">nil</span>)</div><div class="line"></div><div class="line">flyRight.beginTime = <span class="type">CACurrentMediaTime</span>() + <span class="number">0.3</span></div><div class="line"><span class="comment">//可以重用动画 flyRight 在其他 layer 上，每个 layer 都将独立运行该动画的一个副本</span></div><div class="line"><span class="comment">//addAnimation(_:forKey:) 会创建一个动画对象的副本</span></div><div class="line">username.layer.addAnimation(flyRight, forKey: <span class="literal">nil</span>)</div></pre></td></tr></table></figure>
<h2 id="fillMode"><a href="#fillMode" class="headerlink" title="fillMode"></a>fillMode</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对iOS的动画相关的方面单独做了一下整理，以后有时间会持续更新…&lt;/p&gt;
    
    </summary>
    
      <category term="Notes" scheme="https://coderdotcool.github.io/categories/Notes/"/>
    
    
      <category term="iOS" scheme="https://coderdotcool.github.io/tags/iOS/"/>
    
      <category term="Animations" scheme="https://coderdotcool.github.io/tags/Animations/"/>
    
      <category term="Swift" scheme="https://coderdotcool.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift笔记</title>
    <link href="https://coderdotcool.github.io/Notes/Swift%E7%AC%94%E8%AE%B0.html"/>
    <id>https://coderdotcool.github.io/Notes/Swift笔记.html</id>
    <published>2016-05-19T12:22:07.000Z</published>
    <updated>2017-05-12T15:19:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>闲暇学习Swift记的笔记，后有时间会持续更新，查漏补缺…😀</p>
<a id="more"></a>
<h1 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h1><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> pi: <span class="type">Double</span> = <span class="number">3.14159</span></div></pre></td></tr></table></figure>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> variableNumber: <span class="type">Int</span> = <span class="number">42</span></div><div class="line">variableNumber = <span class="number">1_000_000</span></div></pre></td></tr></table></figure>
<h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//You can even use the full range of Unicode characters</span></div><div class="line"><span class="keyword">var</span> 变量ßœ√å: <span class="type">Int</span> = -<span class="number">1</span></div></pre></td></tr></table></figure>
<!-- more -->
<h2 id="类型推导"><a href="#类型推导" class="headerlink" title="类型推导"></a>类型推导</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> coordinates3D: (x: <span class="type">Int</span>, y: <span class="type">Int</span>, z: <span class="type">Int</span>) = (<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>)</div><div class="line"><span class="keyword">let</span> (x, y, z) = coordinates3D</div></pre></td></tr></table></figure>
<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> integer: <span class="type">Int</span> = <span class="number">100</span></div><div class="line"><span class="keyword">var</span> decimal: <span class="type">Double</span> = <span class="number">12.5</span></div><div class="line">integer = <span class="type">Int</span>(decimal)</div><div class="line"></div><div class="line"><span class="keyword">let</span> hourlyRate = <span class="number">19.5</span></div><div class="line"><span class="keyword">let</span> hoursWorked = <span class="number">10</span></div><div class="line"><span class="keyword">let</span> totalCost = hourlyRate * <span class="type">Double</span>(hoursWorked)</div></pre></td></tr></table></figure>
<h2 id="元组-Tuples"><a href="#元组-Tuples" class="headerlink" title="元组(Tuples)"></a>元组(Tuples)</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> coordinates: (<span class="type">Int</span>, <span class="type">Int</span>) = (<span class="number">2</span>, <span class="number">3</span>)</div><div class="line"><span class="keyword">let</span> x: <span class="type">Int</span> = coordinates.<span class="number">0</span></div><div class="line"><span class="keyword">let</span> y: <span class="type">Int</span> = coordinates.<span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> coordinates3D: (x: <span class="type">Int</span>, y: <span class="type">Int</span>, z: <span class="type">Int</span>) = (<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>)</div><div class="line"><span class="keyword">let</span> x1 = coordinates3D.x</div><div class="line"><span class="keyword">let</span> y1 = coordinates3D.y</div><div class="line"><span class="keyword">let</span> z1 = coordinates3D.z</div><div class="line"></div><div class="line"><span class="keyword">let</span> (x2, y2, <span class="number">_</span>) = coordinates3D</div></pre></td></tr></table></figure>
<h2 id="取模"><a href="#取模" class="headerlink" title="取模"></a>取模</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> moduloDecimal = <span class="number">11.6</span> % <span class="number">1.2</span></div><div class="line"><span class="comment">//moduloDecimal 等于 0.8，因为11.6 = 1.2*9+0.8</span></div></pre></td></tr></table></figure>
<h2 id="Shift-operations"><a href="#Shift-operations" class="headerlink" title="Shift operations"></a>Shift operations</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> shiftLeft = <span class="number">1</span> &lt;&lt; <span class="number">3</span></div><div class="line"><span class="keyword">let</span> shiftRight = <span class="number">32</span> &gt;&gt; <span class="number">2</span></div><div class="line"><span class="comment">//结果都等于 8</span></div></pre></td></tr></table></figure>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> name = <span class="string">"Matt"</span></div><div class="line"><span class="keyword">let</span> message = <span class="string">"Hello my name is <span class="subst">\(name)</span>!"</span> <span class="comment">// "Hello my name is Matt!"</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> oneThird = <span class="number">1.0</span> / <span class="number">3.0</span></div><div class="line"><span class="keyword">let</span> oneThirdLongString = <span class="string">"One third is <span class="subst">\(oneThird)</span> as a decimal."</span> <span class="comment">//One third is 0.3333333333333333 as a decimal.</span></div><div class="line"></div><div class="line"><span class="comment">//combining character</span></div><div class="line"><span class="keyword">let</span> stringA = <span class="string">"café"</span></div><div class="line"><span class="keyword">let</span> stringB = <span class="string">"cafe\u&#123;0301&#125;"</span></div><div class="line">stringA.characters.<span class="built_in">count</span> <span class="comment">//4</span></div><div class="line">stringB.characters.<span class="built_in">count</span> <span class="comment">//4</span></div><div class="line"><span class="keyword">let</span> <span class="built_in">equal</span> = stringA == stringB <span class="comment">//equal 为 true</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> string = <span class="string">"Swift Apprentice is a great book!"</span></div><div class="line">string.uppercaseString <span class="comment">//SWIFT APPRENTICE IS A GREAT BOOK!</span></div><div class="line">string.lowercaseString <span class="comment">//swift apprentice is a great book!</span></div></pre></td></tr></table></figure>
<h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> hoursWorked = <span class="number">45</span></div><div class="line"><span class="keyword">var</span> price = <span class="number">0</span></div><div class="line"><span class="keyword">if</span> hoursWorked &gt; <span class="number">40</span> &#123;</div><div class="line">  <span class="keyword">let</span> hoursOver40 = hoursWorked - <span class="number">40</span></div><div class="line">  price += hoursOver40 * <span class="number">50</span></div><div class="line">  hoursWorked -= hoursOver40</div><div class="line">&#125;</div><div class="line">price += hoursWorked * <span class="number">25</span></div><div class="line"><span class="built_in">print</span>(price)</div><div class="line"></div><div class="line"><span class="comment">//1250</span></div></pre></td></tr></table></figure>
<h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> hourOfDay = <span class="number">12</span></div><div class="line"><span class="keyword">let</span> timeOfDay: <span class="type">String</span></div><div class="line"><span class="keyword">switch</span> (hourOfDay) &#123;</div><div class="line"><span class="keyword">case</span> <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>:</div><div class="line">  timeOfDay = <span class="string">"Early morning"</span></div><div class="line"><span class="keyword">case</span> <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>:</div><div class="line">timeOfDay = <span class="string">"Morning"</span></div><div class="line"><span class="keyword">case</span> <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>:</div><div class="line">  timeOfDay = <span class="string">"Afternoon"</span></div><div class="line"><span class="keyword">case</span> <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>:</div><div class="line">  timeOfDay = <span class="string">"Evening"</span></div><div class="line"><span class="keyword">case</span> <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>:</div><div class="line">  timeOfDay = <span class="string">"Late evening"</span></div><div class="line"><span class="keyword">default</span>:</div><div class="line">  timeOfDay = <span class="string">"INVALID HOUR!"</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">print</span>(timeOfDay)</div><div class="line"></div><div class="line"><span class="comment">//Afternoon</span></div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> number = <span class="number">10</span></div><div class="line"><span class="keyword">switch</span> (number) &#123;</div><div class="line"><span class="keyword">case</span> <span class="keyword">let</span> x <span class="keyword">where</span> x % <span class="number">2</span> == <span class="number">0</span>:</div><div class="line">  <span class="built_in">print</span>(<span class="string">"Even"</span>)</div><div class="line"><span class="keyword">default</span>:</div><div class="line">  <span class="built_in">print</span>(<span class="string">"Odd"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Even</span></div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> coordinates: (x: <span class="type">Int</span>, y: <span class="type">Int</span>, z: <span class="type">Int</span>) = (<span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>)</div><div class="line"><span class="keyword">switch</span> (coordinates) &#123;</div><div class="line"><span class="keyword">case</span> (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>): <span class="comment">// 1</span></div><div class="line">  <span class="built_in">print</span>(<span class="string">"Origin"</span>)</div><div class="line"><span class="keyword">case</span> (<span class="number">_</span>, <span class="number">0</span>, <span class="number">0</span>): <span class="comment">// 2</span></div><div class="line">  <span class="built_in">print</span>(<span class="string">"On the x-axis."</span>)</div><div class="line"><span class="keyword">case</span> (<span class="number">0</span>, <span class="number">_</span>, <span class="number">0</span>): <span class="comment">// 3</span></div><div class="line">  <span class="built_in">print</span>(<span class="string">"On the y-axis."</span>)</div><div class="line"><span class="keyword">case</span> (<span class="number">0</span>, <span class="number">0</span>, <span class="number">_</span>): <span class="comment">// 4</span></div><div class="line">  <span class="built_in">print</span>(<span class="string">"On the z-axis."</span>)</div><div class="line"><span class="keyword">default</span>:        <span class="comment">// 5</span></div><div class="line">  <span class="built_in">print</span>(<span class="string">"Somewhere in space"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">switch</span> (coordinates) &#123;</div><div class="line"><span class="keyword">case</span> (<span class="keyword">let</span> x, <span class="keyword">let</span> y, <span class="keyword">let</span> z) <span class="keyword">where</span> x == y &amp;&amp; y == z:</div><div class="line">  <span class="built_in">print</span>(<span class="string">"x = y = z"</span>)</div><div class="line"><span class="keyword">case</span> (<span class="number">_</span>, <span class="number">_</span>, <span class="number">0</span>):</div><div class="line">  <span class="built_in">print</span>(<span class="string">"On the x/y plane"</span>)</div><div class="line"><span class="keyword">case</span> (<span class="number">_</span>, <span class="number">0</span>, <span class="number">_</span>):</div><div class="line">  <span class="built_in">print</span>(<span class="string">"On the x/z plane"</span>)</div><div class="line"><span class="keyword">case</span> (<span class="number">0</span>, <span class="number">_</span>, <span class="number">_</span>):</div><div class="line">  <span class="built_in">print</span>(<span class="string">"On the y/z plane"</span>)</div><div class="line"><span class="keyword">default</span>:</div><div class="line">  <span class="built_in">print</span>(<span class="string">"Nothing special"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">switch</span> (coordinates) &#123;</div><div class="line"><span class="keyword">case</span> (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>):</div><div class="line">  <span class="built_in">print</span>(<span class="string">"Origin"</span>)</div><div class="line"><span class="keyword">case</span> (<span class="keyword">let</span> x, <span class="number">0</span>, <span class="number">0</span>):</div><div class="line">  <span class="built_in">print</span>(<span class="string">"On the x-axis at x = <span class="subst">\(x)</span>"</span>)</div><div class="line"><span class="keyword">case</span> (<span class="number">0</span>, <span class="keyword">let</span> y, <span class="number">0</span>):</div><div class="line">  <span class="built_in">print</span>(<span class="string">"On the y-axis at y = <span class="subst">\(y)</span>"</span>)</div><div class="line"><span class="keyword">case</span> (<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">let</span> z):</div><div class="line">  <span class="built_in">print</span>(<span class="string">"On the z-axis at z = <span class="subst">\(z)</span>"</span>)</div><div class="line"><span class="keyword">case</span> (<span class="keyword">let</span> x, <span class="keyword">let</span> y, <span class="keyword">let</span> z):</div><div class="line">  <span class="built_in">print</span>(<span class="string">"Somewhere in space at x = <span class="subst">\(x)</span>, y = <span class="subst">\(y)</span>, z = <span class="subst">\(z)</span>"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">switch</span> (coordinates) &#123;</div><div class="line"><span class="keyword">case</span> (<span class="keyword">let</span> x, <span class="keyword">let</span> y, <span class="number">_</span>) <span class="keyword">where</span> y == x:</div><div class="line">  <span class="built_in">print</span>(<span class="string">"Along the y = x line."</span>)</div><div class="line"><span class="keyword">case</span> (<span class="keyword">let</span> x, <span class="keyword">let</span> y, <span class="number">_</span>) <span class="keyword">where</span> y == x * x:</div><div class="line">  <span class="built_in">print</span>(<span class="string">"Along the y = x^2 line."</span>)</div><div class="line"><span class="keyword">default</span>:</div><div class="line"><span class="keyword">break</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Ranges"><a href="#Ranges" class="headerlink" title="Ranges"></a>Ranges</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> closedRange = <span class="number">0</span>...<span class="number">5</span></div><div class="line"><span class="keyword">let</span> halfOpenRange = <span class="number">0</span>..&lt;<span class="number">5</span></div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> hourOfDay = <span class="number">12</span></div><div class="line"><span class="keyword">let</span> timeOfDay: <span class="type">String</span></div><div class="line"><span class="keyword">switch</span> (hourOfDay) &#123;</div><div class="line"><span class="keyword">case</span> <span class="number">0</span>...<span class="number">5</span>:</div><div class="line">  timeOfDay = <span class="string">"Early morning"</span></div><div class="line"><span class="keyword">case</span> <span class="number">6</span>...<span class="number">11</span>:</div><div class="line">  timeOfDay = <span class="string">"Morning"</span></div><div class="line"><span class="keyword">case</span> <span class="number">12</span>...<span class="number">16</span>:</div><div class="line">  timeOfDay = <span class="string">"Afternoon"</span></div><div class="line"><span class="keyword">case</span> <span class="number">17</span>...<span class="number">19</span>:</div><div class="line">  timeOfDay = <span class="string">"Evening"</span></div><div class="line"><span class="keyword">case</span> <span class="number">20</span>..&lt;<span class="number">24</span>:</div><div class="line">  timeOfDay = <span class="string">"Late evening"</span></div><div class="line"><span class="keyword">default</span>:</div><div class="line">  timeOfDay = <span class="string">"INVALID HOUR!"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="built_in">count</span> = <span class="number">10</span></div><div class="line"><span class="keyword">var</span> sum = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...<span class="built_in">count</span> &#123;</div><div class="line">	sum += i </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="built_in">count</span> = <span class="number">10</span></div><div class="line"><span class="keyword">var</span> sum = <span class="number">1</span></div><div class="line"><span class="keyword">var</span> lastSum = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span> &#123;</div><div class="line">  <span class="keyword">let</span> temp = sum</div><div class="line">  sum = sum + lastSum</div><div class="line">  lastSum = temp</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sum = <span class="number">1</span></div><div class="line"><span class="keyword">while</span> sum &lt; <span class="number">1000</span> &#123;</div><div class="line">  sum = sum + (sum + <span class="number">1</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sum = <span class="number">1</span></div><div class="line"><span class="keyword">repeat</span> &#123;</div><div class="line">  sum = sum + (sum + <span class="number">1</span>)</div><div class="line">&#125; <span class="keyword">while</span> sum &lt; <span class="number">1000</span></div></pre></td></tr></table></figure>
<h3 id="labeled-statements"><a href="#labeled-statements" class="headerlink" title="labeled statements"></a>labeled statements</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sum = <span class="number">0</span></div><div class="line">rowLoop: <span class="keyword">for</span> row <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">8</span> &#123;</div><div class="line">  columnLoop: <span class="keyword">for</span> column <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">8</span> &#123;</div><div class="line">    <span class="keyword">if</span> row == column &#123;</div><div class="line">      <span class="keyword">continue</span> rowLoop</div><div class="line">    &#125;</div><div class="line">    sum += row * column</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printMyName</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="built_in">print</span>(<span class="string">"My name is Matt Galloway."</span>)</div><div class="line">&#125;</div><div class="line">printMyName()</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printMultipleOf</span><span class="params">(multiplier: Int, and andValue: Int)</span></span> &#123;</div><div class="line">  <span class="built_in">print</span>(<span class="string">"<span class="subst">\(multiplier)</span> * <span class="subst">\(andValue)</span> = <span class="subst">\(multiplier * andValue)</span>"</span>)</div><div class="line">&#125;</div><div class="line">printMultipleOf(<span class="number">4</span>, and: <span class="number">2</span>)</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printMultipleOf</span><span class="params">(multiplier: Int, <span class="number">_</span> andValue: Int)</span></span> &#123;</div><div class="line">  <span class="built_in">print</span>(<span class="string">"<span class="subst">\(multiplier)</span> * <span class="subst">\(andValue)</span> = <span class="subst">\(multiplier * andValue)</span>"</span>)</div><div class="line">&#125;</div><div class="line">printMultipleOf(<span class="number">4</span>, <span class="number">2</span>)</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printMultipleOf</span><span class="params">(multiplier: Int, and andValue: Int = <span class="number">1</span>)</span></span> &#123;</div><div class="line">  <span class="built_in">print</span>(<span class="string">"<span class="subst">\(multiplier)</span> * <span class="subst">\(andValue)</span> = <span class="subst">\(multiplier * andValue)</span>"</span>)</div><div class="line">&#125;</div><div class="line">printMultipleOf(<span class="number">4</span>)</div></pre></td></tr></table></figure>
<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">multiply</span><span class="params">(number: Int, by byValue: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">  <span class="keyword">return</span> number * byValue</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> result = multiply(<span class="number">4</span>, by: <span class="number">2</span>)</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">multiplyAndDivide</span><span class="params">(number: Int, by byValue: Int)</span></span> -&gt; (multiply: <span class="type">Int</span>,</div><div class="line">divide: <span class="type">Int</span>) &#123;</div><div class="line">  <span class="keyword">return</span> (number * byValue, number / byValue)</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> result = multiplyAndDivide(<span class="number">4</span>, by: <span class="number">2</span>)</div><div class="line"><span class="keyword">let</span> multiply = result.multiply</div><div class="line"><span class="keyword">let</span> divide = result.divide</div></pre></td></tr></table></figure>
<h3 id="默认pass-by-value"><a href="#默认pass-by-value" class="headerlink" title="默认pass-by-value"></a>默认pass-by-value</h3><p>函数参数与用<code>let</code>声明的常量等价.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">incrementAndPrint</span><span class="params">(value: Int)</span></span> &#123;</div><div class="line">  value += <span class="number">1</span></div><div class="line">  <span class="built_in">print</span>(value)</div><div class="line">&#125;</div><div class="line"><span class="comment">//Error : Left side of mutating operator isn't mutable: 'value' is a 'let' constant</span></div></pre></td></tr></table></figure>
<h3 id="pass-by-reference"><a href="#pass-by-reference" class="headerlink" title="pass-by-reference"></a>pass-by-reference</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">incrementAndPrintInOut</span><span class="params">(<span class="keyword">inout</span> value: Int)</span></span> &#123;</div><div class="line">  value += <span class="number">1</span></div><div class="line">  <span class="built_in">print</span>(value)</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> value = <span class="number">5</span></div><div class="line">incrementAndPrintInOut(&amp;value)</div><div class="line"><span class="built_in">print</span>(value)</div><div class="line"></div><div class="line"><span class="comment">// 6 </span></div><div class="line"><span class="comment">// 6</span></div></pre></td></tr></table></figure>
<h3 id="函数作为变量"><a href="#函数作为变量" class="headerlink" title="函数作为变量"></a>函数作为变量</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a: Int, <span class="number">_</span> b: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">	<span class="keyword">return</span> a + b </div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> function: (<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Int</span> = add</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printResult</span><span class="params">(function: <span class="params">(Int, Int)</span></span></span> -&gt; <span class="type">Int</span>, <span class="number">_</span> a: <span class="type">Int</span>, <span class="number">_</span> b: <span class="type">Int</span>) &#123;</div><div class="line">  <span class="keyword">let</span> result = function(a, b)</div><div class="line">  <span class="built_in">print</span>(result)</div><div class="line">&#125;</div><div class="line">printResult(add, <span class="number">4</span>, <span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="comment">//6</span></div></pre></td></tr></table></figure>
<h2 id="Closure"><a href="#Closure" class="headerlink" title="Closure"></a>Closure</h2><p>A closure is simply a function with no name. 匿名函数</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> multiplyClosure: (<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Int</span></div><div class="line">multiplyClosure = &#123; (a: <span class="type">Int</span>, b: <span class="type">Int</span>) -&gt; <span class="type">Int</span> <span class="keyword">in</span></div><div class="line">	<span class="keyword">return</span> a * b </div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> result = multiplyClosure(<span class="number">4</span>, <span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="comment">//8</span></div></pre></td></tr></table></figure>
<h3 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> multiplyClosure: (<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Int</span></div><div class="line"></div><div class="line"><span class="comment">//可以省掉return</span></div><div class="line">multiplyClosure = &#123; (a: <span class="type">Int</span>, b: <span class="type">Int</span>) -&gt; <span class="type">Int</span> <span class="keyword">in</span></div><div class="line">	a*b </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//可以省掉返回类型</span></div><div class="line">multiplyClosure = &#123; (a: <span class="type">Int</span>, b: <span class="type">Int</span>) <span class="keyword">in</span></div><div class="line">	a*b </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//可以省掉参数类型</span></div><div class="line">multiplyClosure = &#123; (a, b) <span class="keyword">in</span></div><div class="line">	a*b </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//可以省掉参数列表</span></div><div class="line">multiplyClosure = &#123;</div><div class="line">	$<span class="number">0</span> * $<span class="number">1</span> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">operateOnNumbers</span><span class="params">(a: Int, <span class="number">_</span> b: Int,</span></span></div><div class="line"> operation: <span class="params">(Int, Int)</span> -&gt; <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</div><div class="line">  <span class="keyword">let</span> result = operation(a, b)</div><div class="line">  <span class="built_in">print</span>(result)</div><div class="line">  <span class="keyword">return</span> result</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//1</span></div><div class="line"><span class="keyword">let</span> addClosure = &#123; (a: <span class="type">Int</span>, b: <span class="type">Int</span>) <span class="keyword">in</span></div><div class="line">	a+b </div><div class="line">&#125;</div><div class="line">operateOnNumbers(<span class="number">4</span>, <span class="number">2</span>, operation: addClosure)</div><div class="line"></div><div class="line"><span class="comment">//2</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">addFunction</span><span class="params">(a: Int, b: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">	<span class="keyword">return</span> a + b </div><div class="line">&#125;</div><div class="line">operateOnNumbers(<span class="number">4</span>, <span class="number">2</span>, operation: addFunction)</div><div class="line"></div><div class="line"><span class="comment">//3</span></div><div class="line">operateOnNumbers(<span class="number">4</span>, <span class="number">2</span>, operation: &#123; (a: <span class="type">Int</span>, b: <span class="type">Int</span>) -&gt; <span class="type">Int</span> <span class="keyword">in</span></div><div class="line">	<span class="keyword">return</span> a + b </div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//4</span></div><div class="line">operateOnNumbers(<span class="number">4</span>, <span class="number">2</span>, operation: &#123;</div><div class="line">	$<span class="number">0</span> + $<span class="number">1</span> </div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//最终可简写为：</span></div><div class="line">operateOnNumbers(<span class="number">4</span>, <span class="number">2</span>) &#123;</div><div class="line">	$<span class="number">0</span> + $<span class="number">1</span> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="无返回值"><a href="#无返回值" class="headerlink" title="无返回值"></a>无返回值</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> voidClosure: () -&gt; <span class="type">Void</span> = &#123;</div><div class="line">  <span class="built_in">print</span>(<span class="string">"Swift is awesome!"</span>)</div><div class="line">&#125;</div><div class="line">voidClosure()</div></pre></td></tr></table></figure>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">countingClosure</span><span class="params">()</span></span> -&gt; (() -&gt; <span class="type">Int</span>) &#123;</div><div class="line">  <span class="keyword">var</span> counter = <span class="number">0</span></div><div class="line">  <span class="keyword">let</span> incrementCounter: () -&gt; <span class="type">Int</span> = &#123;</div><div class="line">	counter += <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> counter</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> incrementCounter</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> counter1 = countingClosure()</div><div class="line"><span class="keyword">let</span> counter2 = countingClosure()</div><div class="line"></div><div class="line">counter1() <span class="comment">// 0</span></div><div class="line">counter2() <span class="comment">// 0</span></div><div class="line">counter1() <span class="comment">// 1</span></div><div class="line">counter1() <span class="comment">// 2</span></div><div class="line">counter2() <span class="comment">// 1</span></div></pre></td></tr></table></figure>
<h2 id="Optionals"><a href="#Optionals" class="headerlink" title="Optionals"></a>Optionals</h2><h3 id="force-unwrapping"><a href="#force-unwrapping" class="headerlink" title="force unwrapping"></a>force unwrapping</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> authorName: <span class="type">String</span>? = <span class="string">"Matt Galloway"</span></div><div class="line"><span class="keyword">var</span> unwrappedAuthorName = authorName!</div><div class="line"><span class="built_in">print</span>(<span class="string">"Author is <span class="subst">\(unwrappedAuthorName)</span>"</span>)</div><div class="line"></div><div class="line"><span class="comment">//Author is Matt Galloway</span></div></pre></td></tr></table></figure>
<h3 id="If-let-binding"><a href="#If-let-binding" class="headerlink" title="If let binding"></a>If let binding</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> authorName: <span class="type">String</span>? = <span class="string">"Matt Galloway"</span></div><div class="line"><span class="keyword">let</span> authorAge: <span class="type">Int</span>? = <span class="number">30</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> name: <span class="type">String</span> = authorName,</div><div class="line">       	age: <span class="type">Int</span> = authorAge &#123;</div><div class="line">  <span class="built_in">print</span>(<span class="string">"The author is <span class="subst">\(name)</span> who is <span class="subst">\(age)</span> years old."</span>)</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="built_in">print</span>(<span class="string">"No author or no age."</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="nil-coalescing"><a href="#nil-coalescing" class="headerlink" title="nil coalescing"></a>nil coalescing</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> optionalInt: <span class="type">Int</span>? = <span class="number">10</span></div><div class="line"></div><div class="line"><span class="comment">//result = optionalInt ？optionalInt : 0</span></div><div class="line"><span class="keyword">var</span> result: <span class="type">Int</span> = optionalInt ?? <span class="number">0</span></div><div class="line"><span class="comment">//等价于：</span></div><div class="line"><span class="keyword">var</span> optionalInt: <span class="type">Int</span>? = <span class="number">10</span></div><div class="line"><span class="keyword">var</span> result: <span class="type">Int</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> unwrapped = optionalInt &#123;</div><div class="line">  	result = unwrapped</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	result = <span class="number">0</span> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> numbers: <span class="type">Array</span>&lt;<span class="type">Int</span>&gt;</div><div class="line"><span class="keyword">let</span> inferredNumbers = <span class="type">Array</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line"></div><div class="line"><span class="keyword">let</span> alsoInferredNumbers = [<span class="type">Int</span>]()</div><div class="line"></div><div class="line"><span class="keyword">let</span> evenNumbers = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</div><div class="line"></div><div class="line"><span class="keyword">let</span> allZeros = [<span class="type">Int</span>](<span class="built_in">count</span>: <span class="number">5</span>, repeatedValue: <span class="number">0</span>) <span class="comment">//[0, 0, 0, 0, 0]</span></div></pre></td></tr></table></figure>
<h3 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> players = [<span class="string">"Alice"</span>, <span class="string">"Bob"</span>, <span class="string">"Cindy"</span>, <span class="string">"Dan"</span>]</div><div class="line"><span class="built_in">print</span>(players.isEmpty)</div><div class="line"><span class="comment">// &gt; false</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> currentPlayer = players.first</div><div class="line"><span class="built_in">print</span>(currentPlayer)</div><div class="line"><span class="comment">// &gt; Optional("Alice")</span></div><div class="line"></div><div class="line"><span class="built_in">print</span>(players.last)</div><div class="line"><span class="comment">// &gt; Optional("Dan")</span></div><div class="line"></div><div class="line">currentPlayer = players.<span class="built_in">minElement</span>()</div><div class="line"><span class="built_in">print</span>(currentPlayer)</div><div class="line"><span class="comment">// &gt; Optional("Alice")</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> currentPlayer = currentPlayer &#123;</div><div class="line">  <span class="built_in">print</span>(<span class="string">"<span class="subst">\(currentPlayer)</span> will start"</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">// &gt; Alice will start</span></div><div class="line"></div><div class="line"><span class="built_in">print</span>([<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>].first)</div><div class="line"><span class="comment">// &gt; Optional(2)</span></div><div class="line"><span class="built_in">print</span>([<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>].<span class="built_in">minElement</span>())</div><div class="line"><span class="comment">// &gt; Optional(1)</span></div><div class="line"><span class="built_in">print</span>([<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>].<span class="built_in">maxElement</span>())</div><div class="line"><span class="comment">// &gt; Optional(3)</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> firstPlayer = players[<span class="number">0</span>]</div><div class="line"><span class="built_in">print</span>(<span class="string">"First player is <span class="subst">\(firstPlayer)</span>"</span>)</div><div class="line"><span class="comment">// &gt; First player is "Alice"</span></div><div class="line"></div><div class="line"><span class="comment">//用 Range</span></div><div class="line"><span class="keyword">let</span> upcomingPlayers = players[<span class="number">1</span>...<span class="number">2</span>]</div><div class="line"><span class="built_in">print</span>(upcomingPlayers)</div><div class="line"><span class="comment">// &gt; ["Bob", "Cindy"]</span></div><div class="line"></div><div class="line">players[<span class="number">1</span>...<span class="number">3</span>].<span class="built_in">contains</span>(<span class="string">"Bob"</span>)</div><div class="line"><span class="comment">// &gt; true</span></div></pre></td></tr></table></figure>
<h3 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//追加</span></div><div class="line"><span class="keyword">var</span> players = [<span class="string">"Alice"</span>, <span class="string">"Bob"</span>, <span class="string">"Cindy"</span>, <span class="string">"Dan"</span>]</div><div class="line">players.append(<span class="string">"Eli"</span>)</div><div class="line">players += [<span class="string">"Gina"</span>]</div><div class="line"> <span class="built_in">print</span>(players)</div><div class="line"><span class="comment">// &gt; ["Alice", "Bob", "Cindy", "Dan", "Eli", "Gi</span></div><div class="line"></div><div class="line"><span class="comment">//插入</span></div><div class="line">players.insert(<span class="string">"Frank"</span>, atIndex: <span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="comment">//删除</span></div><div class="line"><span class="keyword">var</span> removedPlayer = players.removeLast()</div><div class="line"><span class="built_in">print</span>(<span class="string">"<span class="subst">\(removedPlayer)</span> was removed"</span>)</div><div class="line"><span class="comment">// &gt; Gina was removed</span></div><div class="line"></div><div class="line">removedPlayer = players.removeAtIndex(<span class="number">2</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"<span class="subst">\(removedPlayer)</span> was removed"</span>)</div><div class="line"><span class="comment">// &gt; Cindy was removed</span></div><div class="line"></div><div class="line"><span class="comment">//更新</span></div><div class="line"><span class="built_in">print</span>(players)</div><div class="line"><span class="comment">// &gt; ["Alice", "Bob", "Dan", "Eli", "Frank"]</span></div><div class="line">players[<span class="number">4</span>] = <span class="string">"Franklin"</span></div><div class="line"><span class="built_in">print</span>(players)</div><div class="line"><span class="comment">// &gt; ["Alice", "Bob", "Dan", "Eli", "Franklin"]</span></div><div class="line"></div><div class="line">players[<span class="number">0</span>...<span class="number">1</span>] = [<span class="string">"Donna"</span>, <span class="string">"Craig"</span>, <span class="string">"Brian"</span>, <span class="string">"Anna"</span>]</div><div class="line"><span class="built_in">print</span>(players)</div><div class="line"><span class="comment">// &gt; ["Donna", "Craig", "Brian", "Anna", "Dan", "Eli", "Franklin"]</span></div><div class="line"></div><div class="line"><span class="comment">//移动</span></div><div class="line"><span class="keyword">let</span> playerAnna = players.removeAtIndex(<span class="number">3</span>)</div><div class="line">players.insert(playerAnna, atIndex: <span class="number">0</span>)</div><div class="line"><span class="built_in">print</span>(players)</div><div class="line"><span class="comment">// &gt; ["Anna", "Donna", "Craig", "Brian", "Dan", "Eli", "Franklin"]</span></div><div class="line"></div><div class="line">players = players.<span class="built_in">sort</span>()</div><div class="line"><span class="built_in">print</span>(players)</div><div class="line"><span class="comment">// &gt; ["Anna", "Brian", "Craig", "Dan", "Donna", "Eli", "Franklin"]</span></div></pre></td></tr></table></figure>
<h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> players = [<span class="string">"Alice"</span>, <span class="string">"Bob"</span>, <span class="string">"Cindy"</span>, <span class="string">"Dan"</span>]</div><div class="line"><span class="keyword">for</span> playerName <span class="keyword">in</span> players &#123;</div><div class="line">  <span class="built_in">print</span>(playerName)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// &gt; Anna</span></div><div class="line"><span class="comment">// &gt; Bob</span></div><div class="line"><span class="comment">// &gt; Cindy</span></div><div class="line"><span class="comment">// &gt; Dan</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (index, playerName) <span class="keyword">in</span> players.<span class="built_in">enumerate</span>() &#123;</div><div class="line">  <span class="built_in">print</span>(<span class="string">"<span class="subst">\(index + <span class="number">1</span>)</span>. <span class="subst">\(playerName)</span>"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// &gt; 1. Anna</span></div><div class="line"><span class="comment">// &gt; 2. Bob</span></div><div class="line"><span class="comment">// &gt; 3. Cindy</span></div><div class="line"><span class="comment">// &gt; 4. Dan</span></div></pre></td></tr></table></figure>
<h3 id="Sequence-operations"><a href="#Sequence-operations" class="headerlink" title="Sequence operations"></a>Sequence operations</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> scores = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>]</div><div class="line"></div><div class="line"><span class="comment">//reduce</span></div><div class="line"><span class="comment">//用第一个参数作为初始值，用combile操作符累计数组(scores)元素</span></div><div class="line"><span class="keyword">let</span> sum = scores.<span class="built_in">reduce</span>(<span class="number">0</span>, combine: +)</div><div class="line"><span class="built_in">print</span>(sum)</div><div class="line"><span class="comment">// &gt; 21</span></div><div class="line"></div><div class="line"><span class="comment">//filter</span></div><div class="line"><span class="comment">//接受一个closure作为参数，对数组(scores)每个元素执行此closure，若此closure返回true，则将对应的元素添加到返回数组中</span></div><div class="line"><span class="built_in">print</span>(scores.<span class="built_in">filter</span>(&#123; $<span class="number">0</span> &gt; <span class="number">5</span> &#125;))</div><div class="line"><span class="comment">// &gt; [8, 6]</span></div><div class="line"></div><div class="line"><span class="comment">//map</span></div><div class="line"><span class="comment">//接受一个closure作为参数,对数组(scores)每个元素执行此closure，返回一个新的元素并将之添加到返回数组中</span></div><div class="line"><span class="built_in">print</span>(scores)</div><div class="line"><span class="comment">// &gt; [2, 2, 8, 6, 1, 2]</span></div><div class="line"><span class="keyword">let</span> newScores = scores.<span class="built_in">map</span>(&#123; $<span class="number">0</span> * <span class="number">2</span> &#125;)</div><div class="line"><span class="built_in">print</span>(newScores)</div><div class="line"><span class="comment">// &gt; [4, 4, 16, 12, 2, 4]</span></div></pre></td></tr></table></figure>
<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><h3 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> pairs: <span class="type">Dictionary</span>&lt;<span class="type">String</span>, <span class="type">Int</span>&gt;</div><div class="line"></div><div class="line"><span class="keyword">let</span> inferredPairs = <span class="type">Dictionary</span>&lt;<span class="type">String</span>, <span class="type">Int</span>&gt;()</div><div class="line"></div><div class="line"><span class="keyword">let</span> alsoInferredPairs = [<span class="type">String</span>: <span class="type">Int</span>]()</div><div class="line"></div><div class="line"><span class="keyword">let</span> namesAndScores = [<span class="string">"Anna"</span>: <span class="number">2</span>, <span class="string">"Brian"</span>: <span class="number">2</span>, <span class="string">"Craig"</span>: <span class="number">8</span>, <span class="string">"Donna"</span>: <span class="number">6</span>]</div><div class="line"><span class="built_in">print</span>(namesAndScores)</div><div class="line"><span class="comment">// &gt; ["Brian": 2, "Anna": 2, "Craig": 8, "Donna": 6]</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> emptyDictionary: [<span class="type">Int</span>: <span class="type">Int</span>]</div><div class="line">emptyDictionar = [:]</div></pre></td></tr></table></figure>
<h3 id="属性和方法-1"><a href="#属性和方法-1" class="headerlink" title="属性和方法"></a>属性和方法</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> namesAndScores = [<span class="string">"Anna"</span>: <span class="number">2</span>, <span class="string">"Brian"</span>: <span class="number">2</span>, <span class="string">"Craig"</span>: <span class="number">8</span>, <span class="string">"Donna"</span>: <span class="number">6</span>]</div><div class="line"></div><div class="line"><span class="built_in">print</span>(namesAndScores[<span class="string">"Anna"</span>])</div><div class="line"><span class="comment">// &gt; Optional(2)</span></div><div class="line"></div><div class="line"><span class="built_in">print</span>(namesAndScores[<span class="string">"Greg"</span>])</div><div class="line"><span class="comment">// &gt; nil</span></div><div class="line"></div><div class="line"><span class="built_in">print</span>(namesAndScores.isEmpty)</div><div class="line"><span class="comment">// &gt; false</span></div><div class="line"><span class="built_in">print</span>(namesAndScores.<span class="built_in">count</span>)</div><div class="line"><span class="comment">// &gt; 4</span></div><div class="line"></div><div class="line"><span class="built_in">print</span>(<span class="type">Array</span>(namesAndScores.keys))</div><div class="line"><span class="comment">// &gt; ["Brian", "Anna", "Craig", "Donna"]</span></div><div class="line"><span class="built_in">print</span>(<span class="type">Array</span>(namesAndScores.values))</div><div class="line"><span class="comment">// &gt; [2, 2, 8, 6]</span></div></pre></td></tr></table></figure>
<h3 id="字典操作"><a href="#字典操作" class="headerlink" title="字典操作"></a>字典操作</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> bobData = [<span class="string">"name"</span>: <span class="string">"Bob"</span>, <span class="string">"profession"</span>: <span class="string">"Card Player"</span>, <span class="string">"country"</span>: <span class="string">"USA"</span>]</div><div class="line"></div><div class="line"><span class="comment">//更新</span></div><div class="line">bobData.updateValue(<span class="string">"CA"</span>, forKey: <span class="string">"state"</span>)</div><div class="line">bobData[<span class="string">"city"</span>] = <span class="string">"San Francisco"</span></div><div class="line"></div><div class="line"><span class="comment">//删除</span></div><div class="line">bobData.removeValueForKey(<span class="string">"state"</span>)</div><div class="line">bobData[<span class="string">"city"</span>] = <span class="literal">nil</span></div></pre></td></tr></table></figure>
<h3 id="遍历-1"><a href="#遍历-1" class="headerlink" title="遍历"></a>遍历</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> namesAndScores = [<span class="string">"Anna"</span>: <span class="number">2</span>, <span class="string">"Brian"</span>: <span class="number">2</span>, <span class="string">"Craig"</span>: <span class="number">8</span>, <span class="string">"Donna"</span>: <span class="number">6</span>]</div><div class="line"></div><div class="line"><span class="keyword">for</span> (key, value) <span class="keyword">in</span> namesAndScores &#123;</div><div class="line">  <span class="built_in">print</span>(<span class="string">"<span class="subst">\(key)</span> - <span class="subst">\(value)</span>"</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">// &gt; Brian - 2</span></div><div class="line"><span class="comment">// &gt; Anna - 2</span></div><div class="line"><span class="comment">// &gt; Craig - 8</span></div><div class="line"><span class="comment">// &gt; Donna - 6</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> key <span class="keyword">in</span> namesAndScores.keys &#123;</div><div class="line">  <span class="built_in">print</span>(<span class="string">"<span class="subst">\(key)</span>, "</span>, terminator: <span class="string">""</span>) <span class="comment">// no newline</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">print</span>(<span class="string">""</span>) <span class="comment">// print one final newline</span></div><div class="line"><span class="comment">// &gt; Brian, Anna, Craig, Donna,</span></div></pre></td></tr></table></figure>
<h3 id="Sequence-operations-1"><a href="#Sequence-operations-1" class="headerlink" title="Sequence operations"></a>Sequence operations</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> namesAndScores = [<span class="string">"Anna"</span>: <span class="number">2</span>, <span class="string">"Brian"</span>: <span class="number">2</span>, <span class="string">"Craig"</span>: <span class="number">8</span>, <span class="string">"Donna"</span>: <span class="number">6</span>]</div><div class="line"></div><div class="line"><span class="comment">//reduce</span></div><div class="line"><span class="comment">//第一个参数为""，用combile closure累计(前面字符串加上后面字典键值字符串)字典(namesAndScores)元素(键值)</span></div><div class="line"><span class="keyword">let</span> namesString = namesAndScores.<span class="built_in">reduce</span>(<span class="string">""</span>, combine: &#123; $<span class="number">0</span> + <span class="string">"<span class="subst">\($<span class="number">1.0</span>)</span>, "</span> &#125;)</div><div class="line"><span class="built_in">print</span>(namesString)</div><div class="line"><span class="comment">// &gt; Brian, Anna, Craig, Donna,</span></div><div class="line"></div><div class="line"><span class="comment">//filter</span></div><div class="line"><span class="comment">//接受一个closure作为参数，对字典(namesAndScores)每个元素执行此closure，取出字典 value 小于 5 的元素</span></div><div class="line"><span class="built_in">print</span>(namesAndScores.<span class="built_in">filter</span>(&#123; $<span class="number">0.1</span> &lt; <span class="number">5</span> &#125;))</div><div class="line"><span class="comment">// &gt; [("Brian", 2), ("Anna", 2)]</span></div></pre></td></tr></table></figure>
<h2 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h2><h3 id="创建Set"><a href="#创建Set" class="headerlink" title="创建Set"></a>创建Set</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> setOne: <span class="type">Set</span>&lt;<span class="type">Int</span>&gt;</div><div class="line"></div><div class="line"><span class="keyword">let</span> setTwo = <span class="type">Set</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line"></div><div class="line"> <span class="built_in">print</span>(setTwo)</div><div class="line"><span class="comment">// &gt; []</span></div><div class="line"></div><div class="line"><span class="comment">//必须显式声明是Set，否则，则创建了数组</span></div><div class="line"><span class="keyword">let</span> someSet: <span class="type">Set</span>&lt;<span class="type">Int</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>]</div><div class="line"><span class="comment">//可以省略Set中的元素类型</span></div><div class="line"><span class="keyword">let</span> anotherSet: <span class="type">Set</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>]</div><div class="line"></div><div class="line"> <span class="built_in">print</span>(someSet)</div><div class="line"><span class="comment">// &gt; [2, 3, 1]</span></div></pre></td></tr></table></figure>
<h3 id="属性和方法-2"><a href="#属性和方法-2" class="headerlink" title="属性和方法"></a>属性和方法</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> someSet: <span class="type">Set</span>&lt;<span class="type">Int</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>]</div><div class="line"></div><div class="line"><span class="built_in">print</span>(someSet.isEmpty)</div><div class="line"><span class="comment">// &gt; false</span></div><div class="line"><span class="built_in">print</span>(someSet.<span class="built_in">count</span>)</div><div class="line"><span class="comment">// &gt; 3</span></div><div class="line"></div><div class="line"><span class="built_in">print</span>(someSet.<span class="built_in">contains</span>(<span class="number">1</span>))</div><div class="line"><span class="comment">// &gt; true</span></div><div class="line"><span class="built_in">print</span>(someSet.<span class="built_in">contains</span>(<span class="number">4</span>))</div><div class="line"><span class="comment">// &gt; false</span></div><div class="line"></div><div class="line"><span class="built_in">print</span>(someSet.first)</div><div class="line"><span class="comment">// &gt; Optional(2)</span></div></pre></td></tr></table></figure>
<h3 id="Set操作"><a href="#Set操作" class="headerlink" title="Set操作"></a>Set操作</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myTimes: <span class="type">Set</span> = [<span class="string">"8am"</span>, <span class="string">"9am"</span>, <span class="string">"10am"</span>]</div><div class="line"> </div><div class="line"><span class="comment">//插入</span></div><div class="line">myTimes.insert(<span class="string">"11am"</span>)</div><div class="line"><span class="built_in">print</span>(myTimes)</div><div class="line"><span class="comment">// &gt; ["9am", "8am", "11am", "10am"]</span></div><div class="line"></div><div class="line"><span class="comment">//删除</span></div><div class="line"><span class="keyword">let</span> removedElement = myTimes.remove(<span class="string">"8am"</span>)</div><div class="line"><span class="built_in">print</span>(removedElement)</div><div class="line"><span class="comment">// &gt; Optional("8am")</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="built_in">print</span>(myTimes)</div><div class="line"><span class="comment">//&gt;["9am", "11am", "10am"]</span></div><div class="line"><span class="keyword">let</span> adamTimes: <span class="type">Set</span> = [<span class="string">"9am"</span>, <span class="string">"11am"</span>, <span class="string">"1pm"</span>]</div><div class="line"></div><div class="line"><span class="comment">//并集 union</span></div><div class="line"><span class="keyword">let</span> unionSet = myTimes.union(adamTimes)</div><div class="line"><span class="built_in">print</span>(unionSet)</div><div class="line"><span class="comment">// &gt; ["9am", "11am", "10am", "1pm"]</span></div><div class="line"></div><div class="line"><span class="comment">//交集 intersect</span></div><div class="line"><span class="keyword">let</span> intersectSet = myTimes.intersect(adamTimes)</div><div class="line"><span class="built_in">print</span>(intersectSet)</div><div class="line"><span class="comment">// &gt; ["9am", "11am"]</span></div><div class="line"></div><div class="line"><span class="comment">//差集 subtract</span></div><div class="line"><span class="keyword">let</span> subtractSet = myTimes.subtract(adamTimes)</div><div class="line"><span class="built_in">print</span>(subtractSet)</div><div class="line"><span class="comment">// &gt; ["10am"]</span></div><div class="line"></div><div class="line"><span class="comment">//异或 Exclusive Or</span></div><div class="line"><span class="keyword">let</span> exclusiveOrSet = myTimes.exclusiveOr(adamTimes)</div><div class="line"><span class="built_in">print</span>(exclusiveOrSet)</div><div class="line"><span class="comment">// &gt; ["10am", "1pm"]</span></div></pre></td></tr></table></figure>
<h3 id="遍历-2"><a href="#遍历-2" class="headerlink" title="遍历"></a>遍历</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myTimes: <span class="type">Set</span> = [<span class="string">"8am"</span>, <span class="string">"9am"</span>, <span class="string">"10am"</span>]</div><div class="line"><span class="keyword">for</span> element <span class="keyword">in</span> myTimes &#123;</div><div class="line">  <span class="built_in">print</span>(element)</div><div class="line">&#125;</div><div class="line"><span class="comment">// &gt; 9am</span></div><div class="line"><span class="comment">// &gt; 11am</span></div><div class="line"><span class="comment">// &gt; 10am</span></div></pre></td></tr></table></figure>
<h1 id="自定义类型"><a href="#自定义类型" class="headerlink" title="自定义类型"></a>自定义类型</h1><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p><strong>结构体无处不存在，许多Swift标准类型都是结构体，比如，Array, Int, Float, Double, Bool, Dictionary, Set 和 String都是被定义为结构体。所以它们所有自己的方法和属性。</strong></p>
<h3 id="简单创建使用"><a href="#简单创建使用" class="headerlink" title="简单创建使用"></a>简单创建使用</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Location</span> </span>&#123;</div><div class="line">  <span class="keyword">let</span> latitude: <span class="type">Double</span></div><div class="line">  <span class="keyword">let</span> longitude: <span class="type">Double</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> pizzaLocation = <span class="type">Location</span>(latitude: <span class="number">44.9871</span>,</div><div class="line">                             longitude: -<span class="number">93.2758</span>)</div><div class="line">                             </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DeliveryRange</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> range: <span class="type">Double</span></div><div class="line">  <span class="keyword">let</span> center: <span class="type">Location</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//常量，不能修改属性值</span></div><div class="line"><span class="keyword">let</span> storeLocation = <span class="type">Location</span>(latitude: <span class="number">44.9871</span>, longitude: -<span class="number">93.2758</span>)</div><div class="line"><span class="comment">//常量，可以修改属性值</span></div><div class="line"><span class="keyword">var</span> pizzaRange = <span class="type">DeliveryRange</span>(range: <span class="number">200</span>, center: storeLocation)</div><div class="line">                               </div><div class="line"><span class="built_in">print</span>(pizzaRange.range) <span class="comment">// 200</span></div><div class="line"><span class="built_in">print</span>(pizzaRange.center.latitude) <span class="comment">// 44.9871</span></div><div class="line"></div><div class="line">pizzaRange.range = <span class="number">250</span></div></pre></td></tr></table></figure>
<h3 id="自定义构造方法"><a href="#自定义构造方法" class="headerlink" title="自定义构造方法"></a>自定义构造方法</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Location</span> </span>&#123;</div><div class="line">  <span class="keyword">let</span> latitude: <span class="type">Double</span></div><div class="line">  <span class="keyword">let</span> longitude: <span class="type">Double</span></div><div class="line">  <span class="comment">// String in GPS format "44.9871,-93.2758"</span></div><div class="line">  <span class="keyword">init</span>(coordinateString: <span class="type">String</span>) &#123;</div><div class="line">    <span class="keyword">let</span> crdSplit = coordinateString.characters.<span class="built_in">split</span>(<span class="string">","</span>)</div><div class="line">    latitude = atof(<span class="type">String</span>(crdSplit.first!))</div><div class="line">    longitude = atof(<span class="type">String</span>(crdSplit.last!))</div><div class="line">  &#125; </div><div class="line">&#125;</div><div class="line"><span class="comment">//一旦自定义构造方法，默认构造方法将无效</span></div><div class="line"><span class="comment">//故，不能执行 Location(latitude: 44.9871, longitude: -93.2758)</span></div><div class="line"><span class="keyword">let</span> coords = <span class="type">Location</span>(coordinateString: <span class="string">"44.9871,-93.2758"</span>)</div><div class="line"><span class="built_in">print</span>(coords.latitude) <span class="comment">// 44.9871</span></div><div class="line"><span class="built_in">print</span>(coords.longitude) <span class="comment">// -93.2758</span></div></pre></td></tr></table></figure>
<p>构造方法重载</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Order</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> toppings: [<span class="type">String</span>]</div><div class="line">    <span class="keyword">var</span> size: <span class="type">String</span></div><div class="line">    <span class="keyword">var</span> crust: <span class="type">String</span></div><div class="line">    <span class="keyword">init</span>(toppings: [<span class="type">String</span>], size: <span class="type">String</span>, crust: <span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.toppings = toppings</div><div class="line">        <span class="keyword">self</span>.size = size</div><div class="line">        <span class="keyword">self</span>.crust = crust</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">init</span>(size: <span class="type">String</span>, crust: <span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.toppings = [<span class="string">"Cheese"</span>]</div><div class="line">        <span class="keyword">self</span>.size = size</div><div class="line">        <span class="keyword">self</span>.crust = crust</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">init</span>(special: <span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.size = <span class="string">"Large"</span></div><div class="line">        <span class="keyword">self</span>.crust = <span class="string">"Regular"</span></div><div class="line">        <span class="keyword">if</span> special == <span class="string">"Veggie"</span> &#123;</div><div class="line">          <span class="keyword">self</span>.toppings = [<span class="string">"Tomatoes"</span>, <span class="string">"Green Pepper"</span>, <span class="string">"Mushrooms"</span>]</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> special == “<span class="type">Meat</span>” &#123;</div><div class="line">          <span class="keyword">self</span>.toppings = [<span class="string">"Sausage"</span>, <span class="string">"Pepperoni"</span>, <span class="string">"Ham"</span>, <span class="string">"Bacon"</span>]</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="keyword">self</span>.toppings = [<span class="string">"Cheese"</span>]</div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>构造方法必须<strong>显式的</strong>给除了Option类型的所有属性赋值</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ClimateControl</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> temperature: <span class="type">Double</span></div><div class="line">  <span class="keyword">var</span> humidity: <span class="type">Double</span>?</div><div class="line">    <span class="keyword">init</span>(temp: <span class="type">Double</span>) &#123;</div><div class="line">    temperature = temp</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">init</span>(temp: <span class="type">Double</span>, hum: <span class="type">Double</span>) &#123;</div><div class="line">    temperature = temp</div><div class="line">    humidity = hum</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> ecoMode = <span class="type">ClimateControl</span>(temp: <span class="number">75.0</span>)</div><div class="line"><span class="keyword">let</span> dryAndComfortable = <span class="type">ClimateControl</span>(temp: <span class="number">71.0</span>, hum: <span class="number">30.0</span>)</div></pre></td></tr></table></figure>
<p>默认值</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ClimateControl</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> temperature: <span class="type">Double</span> = <span class="number">68.0</span></div><div class="line">  <span class="keyword">var</span> humidity: <span class="type">Double</span>?</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> defaultClimate = <span class="type">ClimateControl</span>()</div><div class="line"><span class="built_in">print</span>(defaultClimate.temperature) <span class="comment">// 68.0</span></div></pre></td></tr></table></figure>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DeliveryRange</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> range: <span class="type">Double</span></div><div class="line">  <span class="keyword">let</span> center: <span class="type">Location</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">isInRange</span><span class="params">(customer: Location)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">let</span> difference = sqrt(pow((latitude - center.latitude), <span class="number">2</span>) + pow((longitude - center.longitude), <span class="number">2</span>))</div><div class="line">    <span class="keyword">return</span> difference &lt; range</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> range = <span class="type">DeliveryRange</span>(range: <span class="number">150</span>, center: <span class="type">Location</span>(<span class="string">"44.9871,-93.2758"</span>))</div><div class="line"><span class="keyword">let</span> customer = <span class="type">Location</span>(coordinateString: “<span class="number">44.9850</span>,-<span class="number">93.2750</span>”)</div><div class="line">range.isInRange(customer) <span class="comment">// true!</span></div></pre></td></tr></table></figure>
<h3 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Location</span> </span>&#123;</div><div class="line">  <span class="keyword">let</span> latitude: <span class="type">Double</span></div><div class="line">  <span class="keyword">let</span> longitude: <span class="type">Double</span></div><div class="line">  <span class="comment">// String in GPS format "44.9871,-93.2758"</span></div><div class="line">  <span class="keyword">init</span>(coordinateString: <span class="type">String</span>) &#123;</div><div class="line">    <span class="keyword">let</span> crdSplit = coordinateString.characters.<span class="built_in">split</span>(<span class="string">","</span>)</div><div class="line">    latitude = atof(<span class="type">String</span>(crdSplit.first!))</div><div class="line">    longitude = atof(<span class="type">String</span>(crdSplit.last!))</div><div class="line">  &#125; </div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Location</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">isNorthernHemisphere</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">return</span> latitude &gt; <span class="number">0.0</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> location = <span class="type">Location</span>(coordinateString: <span class="string">"44.9850,-93.2750"</span>)</div><div class="line">location.isNorthernHemisphere() <span class="comment">// true</span></div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">String</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">evenOrOdd</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">return</span> characters.<span class="built_in">count</span> % <span class="number">2</span> == <span class="number">0</span> ? <span class="string">"Even!"</span> : <span class="string">"Odd!"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="string">"I'm odd"</span>.evenOrOdd() <span class="comment">// "Odd!"</span></div></pre></td></tr></table></figure>
<h3 id="结构体变量"><a href="#结构体变量" class="headerlink" title="结构体变量"></a>结构体变量</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> range1: <span class="type">DeliveryRange</span> = <span class="type">DeliveryRange</span>(range: <span class="number">200</span>,</div><div class="line">  center: <span class="type">Location</span>(“<span class="number">44.9871</span>,-<span class="number">93.2758</span>”))</div><div class="line"><span class="comment">// 将 range1 赋值给 range2</span></div><div class="line"><span class="keyword">var</span> range2: <span class="type">DeliveryRange</span> = range1</div><div class="line"><span class="built_in">print</span>(range1.range) <span class="comment">// 200</span></div><div class="line"><span class="built_in">print</span>(range2.range) <span class="comment">// 200</span></div><div class="line"><span class="comment">// 修改 range1 的 range 为 '100'</span></div><div class="line">range1.range = <span class="number">100</span></div><div class="line"><span class="comment">// range1 的 range 为 '100', 但是 range2 的 range 仍然为 '200'</span></div><div class="line"><span class="comment">// 结构体是值类型,而非引用类型</span></div><div class="line"><span class="built_in">print</span>(range1.range) <span class="comment">// 100</span></div><div class="line"><span class="built_in">print</span>(range2.range) <span class="comment">// 200</span></div></pre></td></tr></table></figure>
<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//类不像结构体，类没有提供默认构造方法，必须要写构造方法显式的给属性赋值。</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> firstName: <span class="type">String</span></div><div class="line">  <span class="keyword">var</span> lastName: <span class="type">String</span></div><div class="line">  <span class="keyword">init</span>(firstName: <span class="type">String</span>, lastName: <span class="type">String</span>) &#123;</div><div class="line">  	<span class="keyword">self</span>.firstName = firstName</div><div class="line">    <span class="keyword">self</span>.lastName = lastName</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">fullName</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"<span class="subst">\(firstName)</span> <span class="subst">\(lastName)</span>"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> john = <span class="type">Person</span>(firstName: <span class="string">"Johnny"</span>, lastName: <span class="string">"Appleseed"</span>)</div></pre></td></tr></table></figure>
<p><strong>结构体是不可变的值类型，类是可变的应用类型。</strong><br><strong>类通常用来代表对象，结构体用来代表值</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Grade</span> </span>&#123;</div><div class="line">  <span class="keyword">let</span> letter: <span class="type">String</span></div><div class="line">  <span class="keyword">let</span> points: <span class="type">Double</span></div><div class="line">  <span class="keyword">let</span> credits: <span class="type">Double</span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> firstName: <span class="type">String</span></div><div class="line">  <span class="keyword">var</span> lastName: <span class="type">String</span></div><div class="line">  <span class="keyword">var</span> grades: [<span class="type">Grade</span>] = []</div><div class="line">  <span class="keyword">init</span>(firstName: <span class="type">String</span>, lastName: <span class="type">String</span>) &#123;</div><div class="line">    <span class="keyword">self</span>.firstName = firstName</div><div class="line">    <span class="keyword">self</span>.lastName = lastName</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">recordGrade</span><span class="params">(grade: Grade)</span></span> &#123;</div><div class="line">    grades.append(grade)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> jane = <span class="type">Student</span>(firstName: “<span class="type">Jane</span>”, lastName: “<span class="type">Appleseed</span>”)</div><div class="line"><span class="keyword">let</span> history = <span class="type">Grade</span>(letter: “<span class="type">B</span>”, points: <span class="number">9.0</span>, credits: <span class="number">3.0</span>)</div><div class="line"><span class="keyword">let</span> math = <span class="type">Grade</span>(letter: “<span class="type">A</span>”, points: <span class="number">16.0</span>, credits: <span class="number">4.0</span>)</div><div class="line">jane.recordGrade(history)</div><div class="line">jane.recordGrade(math)</div></pre></td></tr></table></figure>
<h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><ul>
<li><strong>public</strong> : 可以访问当前模块及其他模块中的任何实体（通常用于Framework）。</li>
<li><strong>internal</strong>: 可以访问当前模块中的其他任何实体，但是在模块外无法访问，这是所有实体的<strong>默认</strong>访问级别（通常在一个单目标Application中不需要自行设置访问级别）。</li>
<li><strong>private</strong>: 只能访问当前源文件中的实体（<strong>注意</strong>, Swift中的private和其他语言不太一样，它是基于源文件的，作用范围是整个源文件，如果一个源文件中有两个类，那么一个类可以访问另外一个类的私有成员）</li>
<li>类成员的访问级别<strong>不能高于</strong>类的访问级别 (<strong>注意</strong>, 嵌套类型的访问级别也符合此条规则)</li>
</ul>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> firstName: <span class="type">String</span></div><div class="line">  <span class="keyword">var</span> lastName: <span class="type">String</span></div><div class="line">  <span class="keyword">init</span>(firstName: <span class="type">String</span>, lastName: <span class="type">String</span>) &#123;</div><div class="line">    <span class="keyword">self</span>.firstName = firstName</div><div class="line">    <span class="keyword">self</span>.lastName = lastName</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">//析构</span></div><div class="line">  <span class="keyword">deinit</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">\(firstName)</span> <span class="subst">\(lastName)</span> is being removed from memory!"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>: <span class="title">Person</span> </span>&#123;</div><div class="line">	<span class="comment">//weak 表示弱引用，可避免循环引用。若无 weak 修饰，都为强引用。</span></div><div class="line">	<span class="keyword">weak</span> <span class="keyword">var</span> partner: <span class="type">Student</span>?</div><div class="line">	</div><div class="line">    <span class="keyword">var</span> grades: [<span class="type">Grade</span>] = []</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">recordGrade</span><span class="params">(grade: Grade)</span></span> &#123;</div><div class="line">    	grades.append(grade)</div><div class="line">    &#125; </div><div class="line">    <span class="comment">//required 要求其子类不仅必须要实现此构造方法，而且当其子类调用super.init时，必须要用此构造方法</span></div><div class="line">    <span class="keyword">override</span> <span class="keyword">required</span> <span class="keyword">init</span>(firstName: <span class="type">String</span>, lastName: <span class="type">String</span>) &#123;</div><div class="line">      grades = []</div><div class="line">      <span class="keyword">super</span>.<span class="keyword">init</span>(firstName: firstName, lastName: lastName)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(transfer: <span class="type">Student</span>) &#123;</div><div class="line">      <span class="comment">//使用 convenience 关键字进行修饰的构造方法必须要调用 本类 的构造方法进行初始化</span></div><div class="line">      <span class="keyword">self</span>.<span class="keyword">init</span>(firstName: transfer.firstName, lastName: transfer.lastName)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentAthlete</span>: <span class="title">Student</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> failedClasses: [<span class="type">Grade</span>] = []</div><div class="line">  </div><div class="line">  <span class="comment">// 必须要实现，因为其父类的 required，否则编译器报错</span></div><div class="line">  <span class="keyword">override</span> <span class="keyword">required</span> <span class="keyword">init</span>(firstName: <span class="type">String</span>, lastName: <span class="type">String</span>) &#123;</div><div class="line">    <span class="keyword">self</span>.sports = []</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(firstName: firstName, lastName: lastName)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">init</span>(firstName: <span class="type">String</span>, lastName: <span class="type">String</span>, sports: [<span class="type">String</span>]) &#123;</div><div class="line">    <span class="keyword">self</span>.sports = sports</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> passGrade = <span class="type">Grade</span>(letter: <span class="string">"P"</span>, points: <span class="number">0.0</span>, credits: <span class="number">0.0</span>)</div><div class="line">    </div><div class="line">    <span class="comment">//必须在初始化所有属性后调用super.init</span></div><div class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(firstName: firstName, lastName: lastName)</div><div class="line">    </div><div class="line">    recordGrade(passGrade)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">//重写</span></div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">recordGrade</span><span class="params">(grade: Grade)</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> newFailedClasses: [<span class="type">Grade</span>] = []</div><div class="line">    <span class="keyword">for</span> grade <span class="keyword">in</span> grades &#123;</div><div class="line">      <span class="keyword">if</span> grade.letter == <span class="string">"F"</span> &#123;</div><div class="line">        newFailedClasses.append(grade)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">   	failedClasses = newFailedClasses</div><div class="line">   	<span class="keyword">super</span>.recordGrade(grade)</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">athleteIsEligible</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">return</span> failedClasses.<span class="built_in">count</span> &lt; <span class="number">3</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//final 阻止继承或重写</span></div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span>: <span class="title">Person</span> </span>&#123;</div><div class="line">	<span class="comment">//...</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// Build error!</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentAthlete</span>: <span class="title">Student</span> </span>&#123;</div><div class="line">	<span class="comment">//...</span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>: <span class="title">Person</span> </span>&#123;</div><div class="line">  <span class="keyword">final</span> <span class="function"><span class="keyword">func</span> <span class="title">recordGrade</span><span class="params">(grade: Grade)</span></span> &#123;</div><div class="line">	<span class="comment">//...</span></div><div class="line">  &#125; </div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentAthlete</span>: <span class="title">Student</span> </span>&#123;</div><div class="line">  <span class="comment">// Build error!</span></div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">recordGrade</span><span class="params">(grade: Grade)</span></span> &#123;</div><div class="line">  	<span class="comment">//...</span></div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Swift中的构造方法分为<code>designated</code>构造方法与<code>convenience</code>构造方法两类</li>
</ul>
<ul>
<li><code>designated</code>构造方法也被称为<strong>指定构造方法</strong>，<code>convenience</code>构造方法也被称为<strong>方便构造方法</strong>。</li>
</ul>
<ul>
<li><code>designated</code>构造方法不加任何修饰关键字，<code>convenience</code>构造方法需要使用<code>convenience</code>关键字进行修饰。<ul>
<li>子类<code>designated</code>构造方法中必须调用父类的<code>designated</code>构造方法。</li>
<li><code>convenience</code>构造方法中必须调用当前类的构造方法。</li>
<li><code>convenience</code>构造方法归根结底要调用到<code>designated</code>构造方法。</li>
</ul>
</li>
</ul>
<p><img src="/images/designated_convenience.png" alt="designated &amp; convenience"></p>
<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><h3 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Month</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> <span class="type">January</span></div><div class="line">  <span class="keyword">case</span> <span class="type">February</span></div><div class="line">  <span class="keyword">case</span> <span class="type">March</span></div><div class="line">  <span class="keyword">case</span> <span class="type">April</span></div><div class="line">  <span class="keyword">case</span> <span class="type">May</span></div><div class="line">  <span class="keyword">case</span> <span class="type">June</span></div><div class="line">  <span class="keyword">case</span> <span class="type">July</span></div><div class="line">  <span class="keyword">case</span> <span class="type">August</span></div><div class="line">  <span class="keyword">case</span> <span class="type">September</span></div><div class="line">  <span class="keyword">case</span> <span class="type">October</span></div><div class="line">  <span class="keyword">case</span> <span class="type">November</span></div><div class="line">  <span class="keyword">case</span> <span class="type">December</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//等价于</span></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Month</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> <span class="type">January</span>, <span class="type">February</span>, <span class="type">March</span>, <span class="type">April</span>, <span class="type">May</span>, <span class="type">June</span>, <span class="type">July</span>, <span class="type">August</span>,</div><div class="line">      <span class="type">September</span>, <span class="type">October</span>, <span class="type">November</span>, <span class="type">December</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//既然编译器已知晓类型，可省掉类型</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">schoolSemester</span><span class="params">(month: Month)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">  <span class="keyword">switch</span> month &#123;</div><div class="line">  <span class="keyword">case</span> .<span class="type">August</span>, .<span class="type">September</span>, .<span class="type">October</span>, .<span class="type">November</span>, .<span class="type">December</span>:</div><div class="line">    <span class="keyword">return</span> <span class="string">"Autumn"</span></div><div class="line">  <span class="keyword">case</span> .<span class="type">January</span>, .<span class="type">February</span>, .<span class="type">March</span>, .<span class="type">April</span>, .<span class="type">May</span>:</div><div class="line">    <span class="keyword">return</span> <span class="string">"Spring"</span></div><div class="line">  <span class="keyword">default</span>:</div><div class="line">    <span class="keyword">return</span> <span class="string">"Not in the school year"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> month = <span class="type">Month</span>.<span class="type">April</span></div><div class="line">month = .<span class="type">September</span></div><div class="line">schoolSemester(month) <span class="comment">// "Autumn"</span></div></pre></td></tr></table></figure>
<h3 id="Raw-values"><a href="#Raw-values" class="headerlink" title="Raw values"></a>Raw values</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Month</span>: <span class="title">Int</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> <span class="type">January</span> = <span class="number">1</span>, <span class="type">February</span> = <span class="number">2</span>, <span class="type">March</span> = <span class="number">3</span>, <span class="type">April</span> = <span class="number">4</span>, <span class="type">May</span> = <span class="number">5</span>,</div><div class="line">  	   <span class="type">June</span> = <span class="number">6</span>, <span class="type">July</span> = <span class="number">7</span>, <span class="type">August</span> = <span class="number">8</span>, <span class="type">September</span> = <span class="number">9</span>,</div><div class="line">	   <span class="type">October</span> = <span class="number">10</span>, <span class="type">November</span> = <span class="number">11</span>, <span class="type">December</span> = <span class="number">12</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//等价于</span></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Month</span>: <span class="title">Int</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> <span class="type">January</span> = <span class="number">1</span>, <span class="type">February</span>, <span class="type">March</span>, <span class="type">April</span>, <span class="type">May</span>, <span class="type">June</span>, <span class="type">July</span>,</div><div class="line">  	   <span class="type">August</span>, <span class="type">September</span>, <span class="type">October</span>, <span class="type">November</span>, <span class="type">December</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//访问 raw value</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">monthsUntilWinterBreak</span><span class="params">(month: Month)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="type">Month</span>.<span class="type">December</span>.rawValue - month.rawValue</div><div class="line">&#125;</div><div class="line">monthsUntilWinterBreak(.<span class="type">April</span>) <span class="comment">// 8</span></div><div class="line"></div><div class="line"><span class="comment">//用 raw value 初始化</span></div><div class="line"><span class="comment">//Month(rawValue: 5) 返回 Option 类型，需要解包</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> fifthMonth = <span class="type">Month</span>(rawValue: <span class="number">5</span>) &#123;</div><div class="line">  monthsUntilWinterBreak(fifthMonth)  <span class="comment">// 7</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//非递增的枚举</span></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Coin</span>: <span class="title">Int</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> <span class="type">Penny</span> = <span class="number">1</span></div><div class="line">  <span class="keyword">case</span> <span class="type">Nickel</span> = <span class="number">5</span></div><div class="line">  <span class="keyword">case</span> <span class="type">Dime</span> = <span class="number">10</span></div><div class="line">  <span class="keyword">case</span> <span class="type">Quarter</span> = <span class="number">25</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> coin = <span class="type">Coin</span>.<span class="type">Quarter</span></div><div class="line">coin.rawValue <span class="comment">// 25</span></div></pre></td></tr></table></figure>
<h3 id="Associated-values"><a href="#Associated-values" class="headerlink" title="Associated values"></a>Associated values</h3><ul>
<li>每个枚举 case 可以有0个或多个关联值（Associated values）</li>
<li>每个枚举 case的关联值都可以有自己的数据类型</li>
<li>可以像命名函数参数那样命名关联值</li>
<li>一个枚举不能同时有 Raw values 或 Associated values</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> balance = <span class="number">100</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">WithdrawalResult</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> <span class="type">Success</span>(<span class="type">Int</span>)</div><div class="line">  <span class="keyword">case</span> <span class="type">Error</span>(<span class="type">String</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">withdraw</span><span class="params">(amount: Int)</span></span> -&gt; <span class="type">WithdrawalResult</span> &#123;</div><div class="line"> <span class="keyword">if</span> amount &lt;= balance &#123;</div><div class="line">   balance -= amount</div><div class="line">   <span class="keyword">return</span> .<span class="type">Success</span>(balance)</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line">   <span class="keyword">return</span> .<span class="type">Error</span>(<span class="string">"Not enough money!"</span>)</div><div class="line"> &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> result = withdraw(<span class="number">99</span>)</div><div class="line"><span class="keyword">switch</span> result &#123;</div><div class="line"><span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Success</span>(newBalance):</div><div class="line">  <span class="built_in">print</span>(<span class="string">"Your new balance is: <span class="subst">\(newBalance)</span>"</span>)</div><div class="line"><span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Error</span>(message):</div><div class="line">  <span class="built_in">print</span>(message)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">HTTPMethod</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> <span class="type">GET</span></div><div class="line">  <span class="keyword">case</span> <span class="type">POST</span>(<span class="type">String</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//枚举可以用作状态机(state machine)</span></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">TrafficLight</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> <span class="type">Red</span>, <span class="type">Yellow</span>, <span class="type">Green</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> trafficLight = <span class="type">TrafficLight</span>.<span class="type">Red</span></div></pre></td></tr></table></figure>
<h3 id="Optionals-1"><a href="#Optionals-1" class="headerlink" title="Optionals"></a>Optionals</h3><p><strong>Optionals 就是枚举类型</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//不用 `？` 声明 Optional 类型</span></div><div class="line"><span class="keyword">let</span> email: <span class="type">Optional</span>&lt;<span class="type">String</span>&gt; = .<span class="type">None</span>  <span class="comment">//.None 表示为没有值 nil</span></div><div class="line"><span class="keyword">let</span> website: <span class="type">Optional</span>&lt;<span class="type">String</span>&gt; = .<span class="type">Some</span>(<span class="string">"docoder.com"</span>)  <span class="comment">//.Some 表示有值，为关联值(Associated values)</span></div><div class="line"></div><div class="line"><span class="keyword">switch</span> website &#123;</div><div class="line"><span class="keyword">case</span> .<span class="type">None</span>:</div><div class="line">  <span class="built_in">print</span>(<span class="string">"No value"</span>)</div><div class="line"><span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Some</span>(value):</div><div class="line">  <span class="built_in">print</span>(<span class="string">"Got a value: <span class="subst">\(value)</span>"</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">//&gt; Got a value: docoder.com</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> optionalNil: <span class="type">Optional</span>&lt;<span class="type">Int</span>&gt; = .<span class="type">None</span></div><div class="line">optionalNil == <span class="literal">nil</span>    <span class="comment">// true</span></div><div class="line">optionalNil == .<span class="type">None</span>  <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h2 id="属性-Properties"><a href="#属性-Properties" class="headerlink" title="属性 (Properties)"></a>属性 (Properties)</h2><h3 id="存储属性"><a href="#存储属性" class="headerlink" title="存储属性"></a>存储属性</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Type</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> <span class="type">Work</span>, <span class="type">Family</span>, <span class="type">Friend</span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Contact</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> fullName: <span class="type">String</span></div><div class="line">  <span class="keyword">let</span> emailAddress: <span class="type">String</span></div><div class="line">  <span class="keyword">var</span> type: <span class="type">Type</span> = .<span class="type">Friend</span> <span class="comment">//默认值为 .Friend</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//虽然有默认值，但默认自动生成的构造方法依然要对每个属性赋值，除非自定义构造方法。</span></div></pre></td></tr></table></figure>
<h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TV</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> height: <span class="type">Double</span></div><div class="line">  <span class="keyword">var</span> width: <span class="type">Double</span></div><div class="line">  <span class="comment">// 计算属性</span></div><div class="line">  <span class="keyword">var</span> diagonal: <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">let</span> aSquared = pow(height, <span class="number">2</span>)</div><div class="line">    <span class="keyword">let</span> bSquared = pow(width, <span class="number">2</span>)</div><div class="line">    <span class="keyword">let</span> cSquared = aSquared + bSquared</div><div class="line">    <span class="keyword">let</span> <span class="built_in">c</span> = sqrt(cSquared)</div><div class="line">    <span class="keyword">let</span> rounded = round(<span class="built_in">c</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Int</span>(rounded)</div><div class="line">  &#125; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> tv = <span class="type">TV</span>(height: <span class="number">53.93</span>, width: <span class="number">95.87</span>)</div><div class="line"><span class="keyword">let</span> size = tv.diagonal <span class="comment">// 110</span></div><div class="line"></div><div class="line">tv.width = <span class="number">53.93</span></div><div class="line"><span class="keyword">let</span> diagonal = tv.diagonal <span class="comment">// 76</span></div></pre></td></tr></table></figure>
<h3 id="Getter-and-setter"><a href="#Getter-and-setter" class="headerlink" title="Getter and setter"></a>Getter and setter</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TV</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> height: <span class="type">Double</span></div><div class="line">  <span class="keyword">var</span> width: <span class="type">Double</span></div><div class="line">  <span class="keyword">var</span> diagonal: <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">get</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="type">Int</span>(round(sqrt(height * height + width * width)))</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">set</span> &#123;</div><div class="line">      <span class="keyword">let</span> ratioWidth: <span class="type">Double</span> = <span class="number">16</span></div><div class="line">      <span class="keyword">let</span> ratioHeight: <span class="type">Double</span> = <span class="number">9</span></div><div class="line">      </div><div class="line">      <span class="comment">//newValue 关键字 为 set 方法传进的值</span></div><div class="line">      height = <span class="type">Double</span>(newValue) * ratioHeight / sqrt(ratioWidth * ratioWidth + ratioHeight * ratioHeight)</div><div class="line">      width = height * ratioWidth / ratioHeight</div><div class="line">    &#125; </div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">tv.diagonal = <span class="number">70</span></div><div class="line"><span class="keyword">let</span> height = tv.height <span class="comment">// 34.32...</span></div><div class="line"><span class="keyword">let</span> width = tv.width <span class="comment">// 61.01...</span></div></pre></td></tr></table></figure>
<h3 id="Type-properties-静态属性"><a href="#Type-properties-静态属性" class="headerlink" title="Type properties (静态属性)"></a>Type properties (静态属性)</h3><p>用 <code>static</code> 修饰的属性为 <strong>Type properties</strong>，类型本身的属性，可以跨所有实例。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Level</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> <span class="keyword">var</span> highestLevel = <span class="number">1</span></div><div class="line">  <span class="keyword">let</span> id: <span class="type">Int</span></div><div class="line">  <span class="keyword">var</span> boss: <span class="type">String</span></div><div class="line">  <span class="keyword">var</span> unlocked: <span class="type">Bool</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Error: you can't access a type property on an instance</span></div><div class="line"><span class="keyword">let</span> highestLevel = level3.highestLevel <span class="comment">//不能用实例访问</span></div><div class="line"><span class="comment">// 必须用类型名访问</span></div><div class="line"><span class="keyword">let</span> highestLevel = <span class="type">Level</span>.highestLevel <span class="comment">// 1</span></div></pre></td></tr></table></figure>
<h3 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h3><p>声明单例要用引用类型的 <code>class</code> ,而不能用值类型的 <code>struct</code> ,否则不能修改其属性</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameManager</span> </span>&#123;</div><div class="line">  <span class="comment">// 用 let 修饰的 Type properties (static) 常量 来存储 这个单一实例</span></div><div class="line">  <span class="keyword">static</span> <span class="keyword">let</span> defaultManager = <span class="type">GameManager</span>()</div><div class="line">  <span class="keyword">var</span> gameScore = <span class="number">0</span></div><div class="line">  <span class="keyword">var</span> saveState = <span class="number">0</span></div><div class="line">  <span class="comment">// private 修饰构造方法，使之不能访问，不能再构造其他实例</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">init</span>() &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Property-observers"><a href="#Property-observers" class="headerlink" title="Property observers"></a>Property observers</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Level</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> <span class="keyword">var</span> highestLevel = <span class="number">1</span></div><div class="line">  <span class="keyword">let</span> id: <span class="type">Int</span></div><div class="line">  <span class="keyword">var</span> boss: <span class="type">String</span></div><div class="line">  <span class="keyword">var</span> unlocked: <span class="type">Bool</span> &#123;</div><div class="line">  	<span class="comment">//didSet，属性设值后调用</span></div><div class="line">    <span class="keyword">didSet</span> &#123;</div><div class="line">      <span class="keyword">if</span> unlocked &amp;&amp; id &gt; <span class="type">Level</span>.highestLevel &#123;</div><div class="line">        <span class="type">Level</span>.highestLevel = id</div><div class="line">      &#125;</div><div class="line">	&#125; </div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LightBulb</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> <span class="keyword">let</span> maxCurrent = <span class="number">40</span></div><div class="line">  <span class="keyword">var</span> currentCurrent = <span class="number">0</span> &#123;</div><div class="line">  	<span class="comment">//用 didSet 限制属性的取值</span></div><div class="line">    <span class="keyword">didSet</span> &#123;</div><div class="line">      <span class="keyword">if</span> currentCurrent &gt; <span class="type">LightBulb</span>.maxCurrent &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Current too high, falling back to previous setting."</span>)</div><div class="line">        </div><div class="line">        <span class="comment">//oldValue 关键字 为 didSet 提供的，可以访问设值之前的值</span></div><div class="line">        currentCurrent = oldValue</div><div class="line">      &#125;</div><div class="line">	&#125; </div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> light = <span class="type">LightBulb</span>()</div><div class="line">light.currentCurrent = <span class="number">50</span></div><div class="line"><span class="keyword">var</span> current = light.currentCurrent <span class="comment">// 0</span></div><div class="line">light.currentCurrent = <span class="number">40</span></div><div class="line">current = light.currentCurrent <span class="comment">// 40</span></div></pre></td></tr></table></figure>
<h3 id="懒加载（Lazy-properties）"><a href="#懒加载（Lazy-properties）" class="headerlink" title="懒加载（Lazy properties）"></a>懒加载（Lazy properties）</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</div><div class="line">  </div><div class="line">  <span class="comment">//lazy 的修饰，使 pi 这个立即执行的 closure 没有进行实际计算，直到第一次被访问时才对其计算。</span></div><div class="line">  <span class="comment">//lazy 属性必须为变量，即，用 var 修饰，而不能用 let 修饰</span></div><div class="line">  <span class="built_in">lazy</span> <span class="keyword">var</span> pi = &#123;</div><div class="line">    <span class="keyword">return</span> ((<span class="number">4.0</span> * atan(<span class="number">1.0</span> / <span class="number">5.0</span>)) - atan(<span class="number">1.0</span> / <span class="number">239.0</span>)) * <span class="number">4.0</span></div><div class="line">  &#125;() <span class="comment">//closure 后面有`()`,表示立即执行</span></div><div class="line">    </div><div class="line">  <span class="keyword">var</span> radius: <span class="type">Double</span> = <span class="number">0</span></div><div class="line">  <span class="keyword">var</span> circumference: <span class="type">Double</span> &#123;</div><div class="line">    <span class="keyword">return</span> pi * radius * <span class="number">2</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">init</span> (radius: <span class="type">Double</span>) &#123;</div><div class="line">    <span class="keyword">self</span>.radius = radius</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> circle = <span class="type">Circle</span>(radius: <span class="number">5</span>) <span class="comment">// 实例化一个 Circle, 此时 pi 还没执行</span></div><div class="line"></div><div class="line"><span class="comment">// pi 现在有值了</span></div><div class="line"><span class="keyword">let</span> circumference = circle.circumference <span class="comment">// 31.42</span></div></pre></td></tr></table></figure>
<h2 id="方法-Methods"><a href="#方法-Methods" class="headerlink" title="方法(Methods)"></a>方法(Methods)</h2><h3 id="Function-转为-Method"><a href="#Function-转为-Method" class="headerlink" title="Function 转为 Method"></a>Function 转为 Method</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Month</span>: <span class="title">Int</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> <span class="type">January</span> = <span class="number">1</span>, <span class="type">February</span>, <span class="type">March</span>, <span class="type">April</span>, <span class="type">May</span>, <span class="type">June</span>, <span class="type">July</span>,</div><div class="line">  	   <span class="type">August</span>, <span class="type">September</span>, <span class="type">October</span>, <span class="type">November</span>, <span class="type">December</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">monthsUntilWinterBreak</span><span class="params">(month: Month)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="type">Month</span>.<span class="type">December</span>.rawValue - month.rawValue</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//转换为：</span></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Month</span>: <span class="title">Int</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> <span class="type">January</span> = <span class="number">1</span>, <span class="type">February</span>, <span class="type">March</span>, <span class="type">April</span>, <span class="type">May</span>, <span class="type">June</span>,</div><div class="line">    <span class="type">July</span>, <span class="type">August</span>, <span class="type">September</span>, <span class="type">October</span>, <span class="type">November</span>, <span class="type">December</span></div><div class="line">    </div><div class="line">  <span class="comment">//枚举中的Method，比之前的 function 更合理</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">monthsUntilWinterBreak</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">Month</span>.<span class="type">December</span>.rawValue - <span class="keyword">self</span>.rawValue</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> month = <span class="type">Month</span>.<span class="type">October</span></div><div class="line"><span class="keyword">let</span> monthsLeft = month.monthsUntilWinterBreak() <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<h3 id="构造方法-Initializers"><a href="#构造方法-Initializers" class="headerlink" title="构造方法(Initializers)"></a>构造方法(Initializers)</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Month</span>: <span class="title">Int</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> <span class="type">January</span> = <span class="number">1</span>, <span class="type">February</span>, <span class="type">March</span>, <span class="type">April</span>, <span class="type">May</span>, <span class="type">June</span>,</div><div class="line">    <span class="type">July</span>, <span class="type">August</span>, <span class="type">September</span>, <span class="type">October</span>, <span class="type">November</span>, <span class="type">December</span></div><div class="line">  </div><div class="line">  <span class="comment">//构造方法不需要 func 关键字和命名</span></div><div class="line">  <span class="keyword">init</span>() &#123;</div><div class="line">    <span class="keyword">self</span> = .<span class="type">January</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">monthsUntilWinterBreak</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">Month</span>.<span class="type">December</span>.rawValue - <span class="keyword">self</span>.rawValue</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> month = <span class="type">Month</span>() <span class="comment">// January</span></div><div class="line"><span class="keyword">let</span> monthsLeft = month.monthsUntilWinterBreak() <span class="comment">// 11</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Date</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> month: <span class="type">Month</span></div><div class="line">  <span class="keyword">var</span> day: <span class="type">Int</span></div><div class="line">  <span class="comment">//自定义构造方法后，默认构造方法将无效</span></div><div class="line">  <span class="keyword">init</span>() &#123;</div><div class="line">    month = .<span class="type">January</span></div><div class="line">	day = <span class="number">1</span> </div><div class="line">  &#125;</div><div class="line"> <span class="comment">//如果不重载此构造方法，将不能调用 Date(month: , day: )</span></div><div class="line">  <span class="keyword">init</span>(month: <span class="type">Month</span>, day: <span class="type">Int</span>) &#123;</div><div class="line">    <span class="keyword">self</span>.month = month</div><div class="line">    <span class="keyword">self</span>.day = day</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> date = <span class="type">Date</span>(month: .<span class="type">February</span>, day: <span class="number">14</span>)</div><div class="line"><span class="keyword">let</span> dateMonth = date.month <span class="comment">// February</span></div><div class="line"><span class="keyword">let</span> dateDay = date.day <span class="comment">// 14</span></div></pre></td></tr></table></figure>
<h3 id="Mutating-methods"><a href="#Mutating-methods" class="headerlink" title="Mutating methods"></a>Mutating methods</h3><p>结构体有个限制（因为结构体为值类型），其成员方法 method 不能改变其成员属性，除非用 <code>mutating</code> 修饰此 method</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Date</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> month: <span class="type">Month</span></div><div class="line">  <span class="keyword">var</span> day: <span class="type">Int</span></div><div class="line">  </div><div class="line">  <span class="comment">//用 mutating 修饰，此方法才能修改属性</span></div><div class="line">  <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">advance</span><span class="params">()</span></span> &#123;</div><div class="line">	day += <span class="number">1</span> </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Type-methods-静态方法"><a href="#Type-methods-静态方法" class="headerlink" title="Type methods (静态方法)"></a>Type methods (静态方法)</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Utils</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">factorial</span><span class="params">(number: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> (<span class="number">1</span>...number).<span class="built_in">reduce</span>(<span class="number">1</span>, combine: *)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> factorial = <span class="type">Utils</span>.factorial(<span class="number">6</span>) <span class="comment">// 720</span></div></pre></td></tr></table></figure>
<h2 id="协议-Protocols"><a href="#协议-Protocols" class="headerlink" title="协议 (Protocols)"></a>协议 (Protocols)</h2><h3 id="定义协议"><a href="#定义协议" class="headerlink" title="定义协议"></a>定义协议</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Direction</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> <span class="type">Left</span></div><div class="line">  <span class="keyword">case</span> <span class="type">Right</span> </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line">  <span class="comment">//协议中不能设置任何 如 private, internal 或 public 的访问控制</span></div><div class="line">  </div><div class="line">  <span class="comment">//可以定义属性，但必须要标明 get, set，跟计算属性类似，但不能有任何实现</span></div><div class="line">  <span class="keyword">var</span> weight: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">  <span class="keyword">var</span> name: <span class="type">String</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">accelerate</span><span class="params">()</span></span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">stop</span><span class="params">()</span></span></div><div class="line">  </div><div class="line">  <span class="comment">//协议中不能有对于方法的任何实现代码</span></div><div class="line">  <span class="comment">//故，不能写成 func turn(direction: Direction = .Left)</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">turn</span><span class="params">(direction: Direction)</span></span></div><div class="line">  <span class="comment">//如果要实现可选参数，则需要写重载的方法，如下：</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">turn</span><span class="params">()</span></span></div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">description</span><span class="params">()</span></span> -&gt; <span class="type">String</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="协议继承"><a href="#协议继承" class="headerlink" title="协议继承"></a>协议继承</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">accelerate</span><span class="params">()</span></span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">stop</span><span class="params">()</span></span></div><div class="line">&#125;</div><div class="line"><span class="comment">//协议 WheeledVehicle 继承了协议 Vehicle</span></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">WheeledVehicle</span>: <span class="title">Vehicle</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> numberOfWheels: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">  <span class="keyword">var</span> wheelSize: <span class="type">Double</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实现协议"><a href="#实现协议" class="headerlink" title="实现协议"></a>实现协议</h3><p>协议可以被 <strong>类</strong> , <strong>结构体</strong> , <strong>枚举</strong> 来实现</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Wheeled</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> numberOfWheels: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassyBike</span>: <span class="title">Wheeled</span> </span>&#123;</div><div class="line">  <span class="keyword">let</span> numberOfWheels = <span class="number">2</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//结构体</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StructyBike</span>: <span class="title">Wheeled</span> </span>&#123;</div><div class="line">  <span class="keyword">let</span> numberOfWheels = <span class="number">2</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//枚举</span></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">EnummyBike</span>: <span class="title">Wheeled</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> <span class="type">Mountain</span></div><div class="line">  <span class="keyword">case</span> <span class="type">Road</span></div><div class="line">  <span class="keyword">case</span> <span class="type">Tricycle</span></div><div class="line">  <span class="keyword">var</span> numberOfWheels: <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">Mountain</span>, <span class="type">Road</span>:</div><div class="line">      <span class="keyword">return</span> <span class="number">2</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Tricycle</span>:</div><div class="line">	  <span class="keyword">return</span> <span class="number">3</span> </div><div class="line">	&#125;</div><div class="line">  &#125; </div><div class="line">&#125;</div><div class="line"><span class="comment">// 类</span></div><div class="line"><span class="keyword">var</span> wheels: <span class="type">Wheeled</span> = <span class="type">ClassyBike</span>()</div><div class="line">wheels.numberOfWheels <span class="comment">// 2</span></div><div class="line"><span class="comment">// 结构体</span></div><div class="line">wheels = <span class="type">StructyBike</span>()</div><div class="line">wheels.numberOfWheels <span class="comment">// 2</span></div><div class="line"><span class="comment">// 枚举</span></div><div class="line">wheels = <span class="type">EnummyBike</span>.<span class="type">Tricycle</span></div><div class="line">wheels.numberOfWheels <span class="comment">// 3!</span></div></pre></td></tr></table></figure>
<p>实现协议方法</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">accelerate</span><span class="params">()</span></span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">stop</span><span class="params">()</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//类 Bike 实现了协议 Vehicle</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bike</span>: <span class="title">Vehicle</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> peddling: <span class="type">Bool</span> = <span class="literal">false</span></div><div class="line">  <span class="keyword">var</span> brakesApplied: <span class="type">Bool</span> = <span class="literal">false</span></div><div class="line">  </div><div class="line">  <span class="comment">//实现协议所有方法</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">accelerate</span><span class="params">()</span></span> &#123;</div><div class="line">    peddling = <span class="literal">true</span></div><div class="line">    brakesApplied = <span class="literal">false</span></div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">stop</span><span class="params">()</span></span> &#123;</div><div class="line">    peddling = <span class="literal">false</span></div><div class="line">    brakesApplied = <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现协议属性</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">accelerate</span><span class="params">()</span></span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">stop</span><span class="params">()</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">WheeledVehicle</span>: <span class="title">Vehicle</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> numberOfWheels: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">  <span class="keyword">var</span> wheelSize: <span class="type">Double</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//类 Bike 实现了协议 WheeledVehicle</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bike</span>: <span class="title">WheeledVehicle</span> </span>&#123;</div><div class="line">  </div><div class="line"> <span class="comment">//用 计算属性 实现协议所有属性</span></div><div class="line">  <span class="keyword">var</span> numberOfWheels: <span class="type">Int</span> &#123;</div><div class="line"> 	  <span class="keyword">return</span> <span class="number">2</span> </div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> <span class="keyword">var</span> myWheelSize: <span class="type">Double</span> = <span class="number">16.0</span></div><div class="line">  </div><div class="line">  <span class="keyword">var</span> wheelSize: <span class="type">Double</span> &#123;</div><div class="line">    <span class="keyword">get</span> &#123;</div><div class="line">        <span class="keyword">return</span> myWheelSize</div><div class="line">      &#125;</div><div class="line">    <span class="keyword">set</span> &#123;</div><div class="line">        myWheelSize = newValue</div><div class="line">      &#125;</div><div class="line">  &#125; </div><div class="line">&#125;</div><div class="line"><span class="comment">//等价于</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bike</span>: <span class="title">WheeledVehicle</span> </span>&#123;</div><div class="line">  <span class="comment">//不要求必须要用计算属性实现协议属性</span></div><div class="line">  <span class="comment">//是要对于协议用 get 修饰的属性，继承后可以读；相应的对于协议用 set 修饰的属性，继承后可以写，即可。</span></div><div class="line">  <span class="keyword">let</span> numberOfWheels = <span class="number">2</span> <span class="comment">//let 表明 只读</span></div><div class="line">  <span class="keyword">var</span> wheelSize = <span class="number">16.0</span> <span class="comment">//var 表明可 读写</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">accelerate</span><span class="params">()</span></span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">stop</span><span class="params">()</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">WheeledVehicle</span>: <span class="title">Vehicle</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> numberOfWheels: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">  <span class="keyword">var</span> wheelSize: <span class="type">Double</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bike</span>: <span class="title">WheeledVehicle</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">//虽然协议 WheeledVehicle 中表明只读，但此处可以用 var</span></div><div class="line">  <span class="comment">//用 var 表明对于类 Bike 可读写</span></div><div class="line">  <span class="keyword">var</span> numberOfWheels = <span class="number">2</span> </div><div class="line">  </div><div class="line">  <span class="keyword">var</span> wheelSize = <span class="number">16.0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> bike: <span class="type">Bike</span> = <span class="type">Bike</span>()</div><div class="line"><span class="comment">//可以读写</span></div><div class="line">bike.numberOfWheels = <span class="number">16</span> <span class="comment">// 16-wheeler!</span></div><div class="line"><span class="keyword">var</span> wheeledBike: <span class="type">WheeledVehicle</span> = bike</div><div class="line"><span class="comment">// 此时不能给 wheeledBike 的 numberOfWheels 赋值，因为协议 WheeledVehicle 中 numberOfWheels 为 只读</span></div></pre></td></tr></table></figure>
<h3 id="Typealias"><a href="#Typealias" class="headerlink" title="Typealias"></a>Typealias</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">WeightCalculatable</span> </span>&#123;</div><div class="line">  <span class="comment">//typealias 类型别名，它允许实现此协议的类（结构体或枚举）, 可以任意指定其实际类型</span></div><div class="line">  <span class="comment">//typealias 也同时使协议 WeightCalculatable 不能用于声明变量 (因为编译器不知晓 WeightType 的实际类型), 仅能用于generic constraints(泛型约束)</span></div><div class="line">  <span class="keyword">typealias</span> <span class="type">WeightType</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">calculateWeight</span><span class="params">()</span></span> -&gt; <span class="type">WeightType</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeavyThing</span>: <span class="title">WeightCalculatable</span> </span>&#123;</div><div class="line">  <span class="comment">// HeavyThing 指定 WeightType 为 Int 类型</span></div><div class="line">  <span class="keyword">typealias</span> <span class="type">WeightType</span> = <span class="type">Int</span></div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">calculateWeight</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">  	<span class="keyword">return</span> <span class="number">100</span> </div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LightThing</span>: <span class="title">WeightCalculatable</span> </span>&#123;</div><div class="line">  <span class="comment">// LightThing 指定 WeightType 为 Double 类型</span></div><div class="line">  <span class="keyword">typealias</span> <span class="type">WeightType</span> = <span class="type">Double</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">calculateWeight</span><span class="params">()</span></span> -&gt; <span class="type">Double</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0.0025</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 协议 WeightCalculatable 不能用于声明变量，仅能用于generic constraints(泛型约束)</span></div><div class="line"><span class="keyword">let</span> b: <span class="type">WeightCalculatable</span> = <span class="type">LightThing</span>() <span class="comment">// Build error!</span></div></pre></td></tr></table></figure>
<h3 id="Extensions-1"><a href="#Extensions-1" class="headerlink" title="Extensions"></a>Extensions</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">WhatType</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> typeName: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//用 extension 扩展类型的协议，包括原始类型也可以扩展其协议</span></div><div class="line"><span class="comment">//此特征可以允许你给你实际无法拥有和操作的类添加协议，扩展功能</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">String</span>: <span class="title">WhatType</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> typeName: <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"I'm a String"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> myType: <span class="type">String</span> = <span class="string">"Swift Apprentice!"</span></div><div class="line">myType.typeName <span class="comment">// I'm a String</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bike</span> </span>&#123; &#125;</div><div class="line"><span class="comment">//用 extension 可以方便的添加类（结构体或枚举）的协议，增加其功能；也可以方便的删除其协议和功能(只需把整个 extension 删除即可)</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Bike</span>: <span class="title">Wheeled</span> </span>&#123;</div><div class="line">  <span class="comment">//但 此特征 不能增加 存储属性(stored properties)，只能增加计算属性(computed properties)</span></div><div class="line">  <span class="keyword">var</span> numberOfWheels: <span class="type">Int</span> &#123;</div><div class="line">  	<span class="keyword">return</span> <span class="number">2</span> </div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Bike</span>: <span class="title">Vehicle</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">accelerate</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">// Accelerate</span></div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">stop</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="comment">// Stop</span></div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="操作符Extensions-Equatable和Comparable协议"><a href="#操作符Extensions-Equatable和Comparable协议" class="headerlink" title="操作符Extensions (Equatable和Comparable协议)"></a>操作符Extensions (Equatable和Comparable协议)</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Record</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> wins: <span class="type">Int</span></div><div class="line">  <span class="keyword">var</span> losses: <span class="type">Int</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">swift 标准库中 Equatable 的定义</div><div class="line">protocol Equatable &#123;</div><div class="line">  func ==(lhs: Self, rhs: Self) -&gt; Bool</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Record</span>: <span class="title">Equatable</span> </span>&#123;&#125;</div><div class="line"><span class="comment">//仅需实现 == ( != 会自动生成)</span></div><div class="line"><span class="function"><span class="keyword">func</span> ==<span class="params">(lhs: Record, rhs: Record)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">return</span> lhs.wins == rhs.wins &amp;&amp; lhs.losses == rhs.losses</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> recordA = <span class="type">Record</span>(wins: <span class="number">10</span>, losses: <span class="number">5</span>)</div><div class="line"><span class="keyword">let</span> recordB = <span class="type">Record</span>(wins: <span class="number">10</span>, losses: <span class="number">5</span>)</div><div class="line">recordA == recordB <span class="comment">// True</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">swift 标准库中 Comparable 的定义</div><div class="line">protocol Comparable : Equatable &#123;</div><div class="line">  func &lt;(lhs: Self, rhs: Self) -&gt; Bool</div><div class="line">  func &lt;=(lhs: Self, rhs: Self) -&gt; Bool</div><div class="line">  func &gt;=(lhs: Self, rhs: Self) -&gt; Bool</div><div class="line">  func &gt;(lhs: Self, rhs: Self) -&gt; Bool</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Record</span>: <span class="title">Comparable</span> </span>&#123;&#125;</div><div class="line"><span class="comment">//仅需实现 &lt; ( &gt;,&lt;=,&gt;= 会自动生成)</span></div><div class="line"><span class="function"><span class="keyword">func</span> &lt;(lhs: Record, rhs: Record) -&gt; <span class="title">Bool</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> lhsPercent = <span class="type">Double</span>(lhs.wins) / (<span class="type">Double</span>(lhs.wins) + <span class="type">Double</span>(lhs.losses))</div><div class="line">    <span class="keyword">let</span> rhsPercent = <span class="type">Double</span>(rhs.wins) / (<span class="type">Double</span>(rhs.wins) + <span class="type">Double</span>(rhs.losses))</div><div class="line">    <span class="keyword">return</span> lhsPercent &lt; rhsPercent</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> team1 = <span class="type">Record</span>(wins: <span class="number">23</span>, losses: <span class="number">8</span>)</div><div class="line"><span class="keyword">let</span> team2 = <span class="type">Record</span>(wins: <span class="number">23</span>, losses: <span class="number">8</span>)</div><div class="line"><span class="keyword">let</span> team3 = <span class="type">Record</span>(wins: <span class="number">14</span>, losses: <span class="number">11</span>)</div><div class="line">team1 &lt; team2 <span class="comment">// false</span></div><div class="line">team1 &gt; team3 <span class="comment">// true</span></div><div class="line">team1 &gt;= team3 <span class="comment">// true</span></div><div class="line">team1 &lt;= team3 <span class="comment">// false</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">let</span> leagueRecords = [team1, team2, team3]</div><div class="line"><span class="comment">//既然 Record 实现了 Comparable 协议，自然可以使用 swift 标准库的相关函数进行排序等操作：</span></div><div class="line">leagueRecords.<span class="built_in">sort</span>()</div><div class="line"><span class="comment">// &#123;wins 14, losses 11&#125;</span></div><div class="line"><span class="comment">// &#123;wins 23, losses 8&#125;</span></div><div class="line"><span class="comment">// &#123;wins 23, losses 8&#125;</span></div><div class="line">leagueRecords.<span class="built_in">maxElement</span>() <span class="comment">// &#123;wins 23, losses 8&#125;</span></div><div class="line">leagueRecords.<span class="built_in">minElement</span>() <span class="comment">// &#123;wins 23, losses 8&#125;</span></div><div class="line">leagueRecords.<span class="built_in">startsWith</span>([team1, team2]) <span class="comment">// true</span></div><div class="line">leagueRecords.<span class="built_in">contains</span>(team1) <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h3 id="Hashable协议"><a href="#Hashable协议" class="headerlink" title="Hashable协议"></a>Hashable协议</h3><p>当你的自定义类型要用于 <code>Dictionary</code> 的 key 或 <code>Set</code> 中的元素时，必须要实现 Hashable 协议。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">swift 标准库中 Hashable 的定义</div><div class="line">protocol Hashable : Equatable &#123;</div><div class="line">  var hashValue: Int &#123; get &#125;</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> studentId: <span class="type">Int</span></div><div class="line">    <span class="keyword">var</span> firstName: <span class="type">String</span></div><div class="line">    <span class="keyword">var</span> lastName: <span class="type">String</span></div><div class="line"></div><div class="line">    <span class="keyword">init</span>(studentId: <span class="type">Int</span>, firstName: <span class="type">String</span>, lastName: <span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.studentId = studentId</div><div class="line">        <span class="keyword">self</span>.firstName = firstName</div><div class="line">        <span class="keyword">self</span>.lastName = lastName</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//因为 Hashable 协议继承自 Equatable 协议，故，Student 需要实现 Equatable 协议</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Student</span>: <span class="title">Equatable</span> </span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> ==<span class="params">(lhs: Student, rhs: Student)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">return</span> lhs.studentId == rhs.studentId</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Student</span>: <span class="title">Hashable</span> </span>&#123;</div><div class="line">    <span class="comment">//返回整数哈希值，用于区分不同 Student 实例</span></div><div class="line">    <span class="keyword">var</span> hashValue: <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> studentId</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> john = <span class="type">Student</span>(studentId:<span class="number">1</span>, firstName: <span class="string">"Johnny"</span>, lastName: <span class="string">"Appleseed"</span>)</div><div class="line"><span class="comment">// Dictionary</span></div><div class="line"><span class="keyword">let</span> lockerMap: [<span class="type">Student</span>: <span class="type">String</span>] = [john: <span class="string">"14B"</span>]</div><div class="line"><span class="comment">// Set</span></div><div class="line"><span class="keyword">let</span> classRoster: <span class="type">Set</span>&lt;<span class="type">Student</span>&gt; = [john, john, john, john]</div><div class="line">classRoster.<span class="built_in">count</span> <span class="comment">// 1</span></div></pre></td></tr></table></figure>
<h3 id="BooleanType-协议"><a href="#BooleanType-协议" class="headerlink" title="BooleanType 协议"></a>BooleanType 协议</h3><p>实现了 BooleanType 协议的自定义类型可以在判断条件中使用</p>
<p>因为 Swift 中几乎所有核心类型都是用结构体实现的，包括 <code>Bool</code> 类型，<code>Bool</code> 结构体也实现了 BooleanType 协议</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">swift 标准库中 Hashable 的定义</div><div class="line">protocol BooleanType &#123;</div><div class="line">  var boolValue: Bool &#123; get &#125;</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Record</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> wins: <span class="type">Int</span></div><div class="line">  <span class="keyword">var</span> losses: <span class="type">Int</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Record</span>: <span class="title">BooleanType</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> boolValue: <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">return</span> wins &gt; losses</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="type">Record</span>(wins: <span class="number">10</span>, losses: <span class="number">5</span>) &#123;</div><div class="line">  <span class="built_in">print</span>(<span class="string">"winning!"</span>)</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="built_in">print</span>(<span class="string">"losing :("</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="CustomStringConvertible"><a href="#CustomStringConvertible" class="headerlink" title="CustomStringConvertible"></a>CustomStringConvertible</h3><p>CustomStringConvertible 协议 用于 debug 自定义类型时打印 log</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">swift 标准库中 Hashable 的定义</div><div class="line">protocol CustomStringConvertible &#123;</div><div class="line">  var description: String &#123; get &#125;</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Record</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> wins: <span class="type">Int</span></div><div class="line">  <span class="keyword">var</span> losses: <span class="type">Int</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//默认</span></div><div class="line"><span class="keyword">let</span> record = <span class="type">Record</span>(wins: <span class="number">23</span>, losses: <span class="number">8</span>)</div><div class="line"><span class="built_in">print</span>(record)</div><div class="line"><span class="comment">// Record(wins: 23, losses: 8)</span></div><div class="line"></div><div class="line"><span class="comment">//自定义</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Record</span>: <span class="title">CustomStringConvertible</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> description: <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"<span class="subst">\(wins)</span> - <span class="subst">\(losses)</span>"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">print</span>(record)</div><div class="line"><span class="comment">// 23 - 8</span></div></pre></td></tr></table></figure>
<h2 id="面向协议编程-Protocol-Oriented-Programming"><a href="#面向协议编程-Protocol-Oriented-Programming" class="headerlink" title="面向协议编程 ( Protocol-Oriented Programming )"></a>面向协议编程 ( Protocol-Oriented Programming )</h2><h3 id="扩展协议-protocol-extensions"><a href="#扩展协议-protocol-extensions" class="headerlink" title="扩展协议 (protocol extensions)"></a>扩展协议 (protocol extensions)</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">TeamRecord</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> wins: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">  <span class="keyword">var</span> losses: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">winningPercentage</span><span class="params">()</span></span> -&gt; <span class="type">Double</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//对协议进行扩展 (extension)</span></div><div class="line"><span class="comment">//与协议不同，协议的扩展，可以有实现</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">TeamRecord</span> </span>&#123;</div><div class="line">  <span class="comment">//计算属性 gamePlayed 及其实现</span></div><div class="line">  <span class="keyword">var</span> gamesPlayed: <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> wins + losses</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//实现 TeamRecord 协议</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BaseballRecord</span>: <span class="title">TeamRecord</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> wins: <span class="type">Int</span></div><div class="line">  <span class="keyword">var</span> losses: <span class="type">Int</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">winningPercentage</span><span class="params">()</span></span> -&gt; <span class="type">Double</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">Double</span>(wins) / (<span class="type">Double</span>(wins) + <span class="type">Double</span>(losses))</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> sanFranciscoSwifts = <span class="type">BaseballRecord</span>(wins: <span class="number">10</span>, losses: <span class="number">5</span>)</div><div class="line"><span class="comment">//BaseballRecord 并不用实现 gamesPlayed 方法，而可以直接使用</span></div><div class="line">sanFranciscoSwifts.gamesPlayed <span class="comment">// 15</span></div></pre></td></tr></table></figure>
<h3 id="协议中方法的默认实现-Default-implementations"><a href="#协议中方法的默认实现-Default-implementations" class="headerlink" title="协议中方法的默认实现 (Default implementations)"></a>协议中方法的默认实现 (Default implementations)</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">TeamRecord</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> wins: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">  <span class="keyword">var</span> losses: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">winningPercentage</span><span class="params">()</span></span> -&gt; <span class="type">Double</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//用 extension 默认实现 winningPercentage</span></div><div class="line"><span class="comment">//要实现 TeamRecord 接口，便可以不用实现 winningPercentage 方法。</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">TeamRecord</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">winningPercentage</span><span class="params">()</span></span> -&gt; <span class="type">Double</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">Double</span>(wins) / (<span class="type">Double</span>(wins) + <span class="type">Double</span>(losses))</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BaseballRecord</span>: <span class="title">TeamRecord</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> wins: <span class="type">Int</span></div><div class="line">  <span class="keyword">var</span> losses: <span class="type">Int</span></div><div class="line">  <span class="keyword">let</span> seasonLength = <span class="number">162</span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BasketballRecord</span>: <span class="title">TeamRecord</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> wins: <span class="type">Int</span></div><div class="line">  <span class="keyword">var</span> losses: <span class="type">Int</span></div><div class="line">  <span class="keyword">let</span> seasonLength = <span class="number">82</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HockeyRecord</span>: <span class="title">TeamRecord</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> wins: <span class="type">Int</span></div><div class="line">  <span class="keyword">var</span> losses: <span class="type">Int</span></div><div class="line">  <span class="keyword">var</span> ties: <span class="type">Int</span></div><div class="line">  <span class="comment">// HockeyRecord 引入 ties, 于是它可以有对 winningPercentage 方法 自己的实现</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">winningPercentage</span><span class="params">()</span></span> -&gt; <span class="type">Double</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">Double</span>(wins) / (<span class="type">Double</span>(wins) + <span class="type">Double</span>(losses) + <span class="type">Double</span>(ties))</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> baseballRecord: <span class="type">TeamRecord</span> = <span class="type">BaseballRecord</span>(wins: <span class="number">10</span>, losses: <span class="number">6</span>)</div><div class="line"><span class="keyword">let</span> hockeyRecord: <span class="type">TeamRecord</span> = <span class="type">HockeyRecord</span>(wins: <span class="number">8</span>, losses: <span class="number">7</span>, ties: <span class="number">1</span>)</div><div class="line">baseballRecord.winningPercentage() <span class="comment">// 10/(10+6) == .625</span></div><div class="line">hockeyRecord.winningPercentage() <span class="comment">// 8/(8+7+1) == .500</span></div></pre></td></tr></table></figure>
<h3 id="扩展协议的分派-dispatching"><a href="#扩展协议的分派-dispatching" class="headerlink" title="扩展协议的分派(dispatching)"></a>扩展协议的分派(dispatching)</h3><ul>
<li>协议 (protocol) 定义了，扩展 (extension) 中也定义重写了的方法或属性，无论以协议声明还是以实现类型声明，若实现类型实现了，则总是调用实现类型中的方法或属性，否则调用扩展，参考 <strong>协议中方法的默认实现</strong>。</li>
<li>协议 (protocol) 未定义了，扩展 (extension) 中定义实现的方法或属性，则依赖声明的是协议还是实现类型，若以协议声明则调用协议中的方法或属性，若以实现类型声明则调用实现类中的方法或属性 (假如实现类型实现了此方法或属性)，如下：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">TeamRecord</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> wins: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">  <span class="keyword">var</span> losses: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">winningPercentage</span><span class="params">()</span></span> -&gt; <span class="type">Double</span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">TeamRecord</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> gamesPlayed: <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> wins + losses</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BaseballRecord</span>: <span class="title">TeamRecord</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> wins: <span class="type">Int</span></div><div class="line">  <span class="keyword">var</span> losses: <span class="type">Int</span></div><div class="line">  <span class="keyword">let</span> gamesPlayed: <span class="type">Int</span> = <span class="number">162</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">winningPercentage</span><span class="params">()</span></span> -&gt; <span class="type">Double</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">Double</span>(wins) / (<span class="type">Double</span>(wins) + <span class="type">Double</span>(losses))</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 以 TeamRecord 协议定义</span></div><div class="line"><span class="keyword">let</span> team1: <span class="type">TeamRecord</span> = <span class="type">BaseballRecord</span>(wins: <span class="number">10</span>, losses: <span class="number">5</span>)</div><div class="line"><span class="comment">// 以 BaseballRecord 类 定义</span></div><div class="line"><span class="keyword">let</span> team2: <span class="type">BaseballRecord</span> = <span class="type">BaseballRecord</span>(wins: <span class="number">10</span>, losses: <span class="number">5</span>)</div><div class="line"><span class="comment">// 调用的是 TeamRecord extension 里的gamesPlayed</span></div><div class="line">team1.gamesPlayed <span class="comment">// 15</span></div><div class="line"><span class="comment">// 调用的是 BaseballRecord 里的gamesPlayed</span></div><div class="line">team2.gamesPlayed <span class="comment">// 162!!</span></div></pre></td></tr></table></figure>
<h3 id="限制类型的协议扩展-Type-constraints"><a href="#限制类型的协议扩展-Type-constraints" class="headerlink" title="限制类型的协议扩展 (Type constraints)"></a>限制类型的协议扩展 (Type constraints)</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">TeamRecord</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> wins: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">  <span class="keyword">var</span> losses: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">winningPercentage</span><span class="params">()</span></span> -&gt; <span class="type">Double</span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Tieable</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> ties: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//当实现类型既实现了 TeamRecord 又实现了 Tieable 才予以扩展</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">TeamRecord</span> <span class="title">where</span> <span class="title">Self</span>: <span class="title">Tieable</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">winningPercentage</span><span class="params">()</span></span> -&gt; <span class="type">Double</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">Double</span>(wins) / (<span class="type">Double</span>(wins) + <span class="type">Double</span>(losses) + <span class="type">Double</span>(ties))</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HockeyRecord</span>: <span class="title">TeamRecord</span>, <span class="title">Tieable</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> wins: <span class="type">Int</span></div><div class="line">  <span class="keyword">var</span> losses: <span class="type">Int</span></div><div class="line">  <span class="keyword">var</span> ties: <span class="type">Int</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> hockeyRecord: <span class="type">TeamRecord</span> = <span class="type">HockeyRecord</span>(wins: <span class="number">8</span>, losses: <span class="number">7</span>, ties: <span class="number">1</span>)</div><div class="line">hockeyRecord.winningPercentage() <span class="comment">// 0.5</span></div></pre></td></tr></table></figure>
<h3 id="Traits-mixins-and-multiple-inheritance"><a href="#Traits-mixins-and-multiple-inheritance" class="headerlink" title="Traits, mixins and multiple inheritance"></a>Traits, mixins and multiple inheritance</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">TeamRecord</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> wins: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">  <span class="keyword">var</span> losses: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">winningPercentage</span><span class="params">()</span></span> -&gt; <span class="type">Double</span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">TeamRecord</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">winningPercentage</span><span class="params">()</span></span> -&gt; <span class="type">Double</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">Double</span>(wins) / (<span class="type">Double</span>(wins) + <span class="type">Double</span>(losses))</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">TieableRecord</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> ties: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">DivisionalRecord</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> divisionalWins: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">  <span class="keyword">var</span> divisionalLosses: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Trait，增加了计算 totalPoints 的功能</span></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">PointableRecord</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">totalPoints</span><span class="params">()</span></span> -&gt; <span class="type">Int</span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">PointableRecord</span> <span class="title">where</span> <span class="title">Self</span>: <span class="title">TieableRecord</span>, <span class="title">Self</span>: <span class="title">TeamRecord</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">totalPoints</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> (<span class="number">2</span> * wins) + (<span class="number">1</span> * ties)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//mixins: CustomStringConvertible, Equatable  </span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HockeyRecord</span>: <span class="title">TeamRecord</span>,</span></div><div class="line">                     <span class="title">TieableRecord</span>,</div><div class="line">                     <span class="title">DivisionalRecord</span>,</div><div class="line">                     <span class="title">CustomStringConvertible</span>,</div><div class="line">                     <span class="title">Equatable</span> &#123;</div><div class="line">  <span class="keyword">var</span> wins: <span class="type">Int</span></div><div class="line">  <span class="keyword">var</span> losses: <span class="type">Int</span></div><div class="line">  <span class="keyword">var</span> ties: <span class="type">Int</span></div><div class="line">  <span class="keyword">var</span> divisionalWins: <span class="type">Int</span></div><div class="line">  <span class="keyword">var</span> divisionalLosses: <span class="type">Int</span></div><div class="line">  <span class="keyword">var</span> description: <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"<span class="subst">\(wins)</span> - <span class="subst">\(losses)</span> - <span class="subst">\(ties)</span>"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> ==<span class="params">(lhs: HockeyRecord, rhs: HockeyRecord)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">  <span class="keyword">return</span> lhs.wins == rhs.wins &amp;&amp;</div><div class="line">  		 lhs.ties == rhs.ties &amp;&amp;</div><div class="line">	   lhs.losses == rhs.losses</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h1><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ErrorType 协议</span></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">RollingError</span>: <span class="title">ErrorType</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> <span class="type">Doubles</span></div><div class="line">  <span class="keyword">case</span> <span class="type">OutOfFunding</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> hasFunding = <span class="literal">true</span></div><div class="line"><span class="comment">//throws</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">roll</span><span class="params">(firstDice: Int, secondDice: Int)</span></span> <span class="keyword">throws</span> &#123;</div><div class="line">  <span class="keyword">let</span> error: <span class="type">RollingError</span></div><div class="line">  <span class="keyword">if</span> firstDice == secondDice &amp;&amp; hasFunding &#123;</div><div class="line">    error = .<span class="type">Doubles</span></div><div class="line">    hasFunding = <span class="literal">false</span></div><div class="line">    <span class="keyword">throw</span> error</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> firstDice == secondDice &amp;&amp; !hasFunding &#123;</div><div class="line">    hasFunding = <span class="literal">true</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"Huzzah! You raise another round of funding!"</span>)</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> !hasFunding &#123;</div><div class="line">    error = .<span class="type">OutOfFunding</span></div><div class="line">    <span class="keyword">throw</span> error</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"You moved <span class="subst">\(firstDice + secondDice)</span> spaces"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//try catch</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">move</span><span class="params">(firstDice: Int, secondDice: Int)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">  <span class="keyword">do</span> &#123;</div><div class="line">    <span class="keyword">try</span> roll(firstDice, secondDice: secondDice)</div><div class="line">    <span class="keyword">return</span> <span class="string">"Successful roll."</span></div><div class="line">  &#125; <span class="keyword">catch</span> <span class="type">RollingError</span>.<span class="type">Doubles</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"You rolled doubles and have lost your funding"</span></div><div class="line">  &#125; <span class="keyword">catch</span> <span class="type">RollingError</span>.<span class="type">OutOfFunding</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"You need to do another round of funding."</span></div><div class="line">  &#125; <span class="keyword">catch</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"Unknown error"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Direction</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> <span class="type">Left</span></div><div class="line">  <span class="keyword">case</span> <span class="type">Right</span></div><div class="line">  <span class="keyword">case</span> <span class="type">Forward</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">PugBotError</span>: <span class="title">ErrorType</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> <span class="type">DidNotTurnLeft</span>(directionMoved: <span class="type">Direction</span>)</div><div class="line">  <span class="keyword">case</span> <span class="type">DidNotTurnRight</span>(directionMoved: <span class="type">Direction</span>)</div><div class="line">  <span class="keyword">case</span> <span class="type">DidNotGoForward</span>(directionMoved: <span class="type">Direction</span>)</div><div class="line">  <span class="keyword">case</span> <span class="type">EndOfPath</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PugBot</span> </span>&#123;</div><div class="line">  <span class="keyword">let</span> name: <span class="type">String</span></div><div class="line">  <span class="keyword">let</span> correctPath: [<span class="type">Direction</span>]</div><div class="line">  <span class="keyword">var</span> currentStepInPath = <span class="number">0</span></div><div class="line">  </div><div class="line">  <span class="comment">//可失败的初始化(failable initializer)</span></div><div class="line">  <span class="keyword">init</span>? (name: <span class="type">String</span>, correctPath: [<span class="type">Direction</span>]) &#123;</div><div class="line">    <span class="keyword">self</span>.correctPath = correctPath</div><div class="line">    <span class="keyword">self</span>.name = name</div><div class="line">    </div><div class="line">    <span class="keyword">guard</span> (correctPath.<span class="built_in">count</span> &gt; <span class="number">0</span>) <span class="keyword">else</span> &#123;<span class="keyword">return</span> <span class="literal">nil</span>&#125;</div><div class="line">    </div><div class="line">    <span class="keyword">switch</span> name &#123;</div><div class="line">      <span class="keyword">case</span> <span class="string">"Delia"</span>, <span class="string">"Olive"</span>, <span class="string">"Frank"</span>, <span class="string">"Otis"</span>, <span class="string">"Doug"</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line">      <span class="keyword">default</span>:</div><div class="line">		<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">	&#125; </div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">turnLeft</span><span class="params">()</span></span> <span class="keyword">throws</span> &#123;</div><div class="line">    <span class="keyword">guard</span> (currentStepInPath &lt; correctPath.<span class="built_in">count</span>) <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="type">PugBotError</span>.<span class="type">EndOfPath</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">let</span> direction = correctPath[currentStepInPath]</div><div class="line">    <span class="keyword">if</span> direction != .<span class="type">Left</span> &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="type">PugBotError</span>.<span class="type">DidNotTurnLeft</span>(directionMoved: direction)</div><div class="line">    &#125;</div><div class="line">    currentStepInPath += <span class="number">1</span></div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">turnRight</span><span class="params">()</span></span> <span class="keyword">throws</span> &#123;</div><div class="line">    <span class="keyword">guard</span> (currentStepInPath &lt; correctPath.<span class="built_in">count</span>) <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="type">PugBotError</span>.<span class="type">EndOfPath</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">let</span> direction = correctPath[currentStepInPath]</div><div class="line">    <span class="keyword">if</span> direction != .<span class="type">Right</span> &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="type">PugBotError</span>.<span class="type">DidNotTurnRight</span>(directionMoved: direction)</div><div class="line">    &#125;</div><div class="line">    currentStepInPath += <span class="number">1</span></div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">moveForward</span><span class="params">()</span></span> <span class="keyword">throws</span> &#123;</div><div class="line">    <span class="keyword">guard</span> (currentStepInPath &lt; correctPath.<span class="built_in">count</span>) <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="type">PugBotError</span>.<span class="type">EndOfPath</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">let</span> direction = correctPath[currentStepInPath]</div><div class="line">    <span class="keyword">if</span> direction != .<span class="type">Forward</span> &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="type">PugBotError</span>.<span class="type">DidNotGoForward</span>(directionMoved: direction)</div><div class="line">    &#125;</div><div class="line">    currentStepInPath += <span class="number">1</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">goHome</span><span class="params">()</span></span> <span class="keyword">throws</span> &#123;</div><div class="line">    <span class="keyword">try</span> moveForward()</div><div class="line">    <span class="keyword">try</span> turnLeft()</div><div class="line">    <span class="keyword">try</span> moveForward()</div><div class="line">    <span class="keyword">try</span> turnRight()</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">movePugBotSafely</span><span class="params">(move: <span class="params">()</span></span></span> <span class="keyword">throws</span> -&gt; ()) -&gt; <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">      <span class="keyword">try</span> move()</div><div class="line">          <span class="keyword">return</span> <span class="string">"Completed move successfully."</span></div><div class="line">      &#125; <span class="keyword">catch</span> <span class="type">PugBotError</span>.<span class="type">DidNotTurnLeft</span>(<span class="keyword">let</span> directionMoved) &#123;</div><div class="line">      	  <span class="keyword">return</span> <span class="string">"The PugBot was supposed to turn left, but turned <span class="subst">\(directionMoved)</span> instead."</span></div><div class="line">      &#125; <span class="keyword">catch</span> <span class="type">PugBotError</span>.<span class="type">DidNotTurnRight</span>(<span class="keyword">let</span> directionMoved) &#123;</div><div class="line">      	  <span class="keyword">return</span> <span class="string">"The PugBot was supposed to turn right, but turned <span class="subst">\(directionMoved)</span> instead."</span></div><div class="line">      &#125; <span class="keyword">catch</span> <span class="type">PugBotError</span>.<span class="type">DidNotGoForward</span>(<span class="keyword">let</span> directionMoved) &#123;</div><div class="line">          <span class="keyword">return</span> <span class="string">"The PugBot was supposed to move forward, but turned <span class="subst">\(directionMoved)</span> instead."</span></div><div class="line">      &#125; <span class="keyword">catch</span> <span class="type">PugBotError</span>.<span class="type">EndOfPath</span>() &#123;</div><div class="line">          <span class="keyword">return</span> <span class="string">"The PugBot tried to move past the end of the path."</span></div><div class="line">      &#125; <span class="keyword">catch</span> &#123;</div><div class="line">          <span class="keyword">return</span> <span class="string">"An unknown error occurred"</span></div><div class="line">      &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> rightDirections: [<span class="type">Direction</span>] =</div><div class="line"> [.<span class="type">Forward</span>, .<span class="type">Left</span>, .<span class="type">Forward</span>, .<span class="type">Right</span>]</div><div class="line"><span class="keyword">let</span> wrongDirections: [<span class="type">Direction</span>] =</div><div class="line"> [.<span class="type">Left</span>, .<span class="type">Left</span>, .<span class="type">Left</span>, .<span class="type">Forward</span>]</div><div class="line"> </div><div class="line"><span class="keyword">let</span> invalidPug = <span class="type">PugBot</span>(name: <span class="string">"Lassie"</span>, correctPath: rightDirections)</div><div class="line"><span class="keyword">let</span> myPugBot = <span class="type">PugBot</span>(name: <span class="string">"Delia"</span>, correctPath: rightDirections)!</div><div class="line"><span class="keyword">let</span> wrongPugBot = <span class="type">PugBot</span>(name: <span class="string">"Delia"</span>, correctPath: wrongDirections)!</div><div class="line"></div><div class="line">movePugBotSafely &#123;</div><div class="line">  <span class="keyword">try</span> myPugBot.goHome()</div><div class="line">  <span class="keyword">try</span> myPugBot.moveForward()</div><div class="line">&#125;</div><div class="line"><span class="comment">//&gt; The PugBot tried to move past the end of the path.</span></div></pre></td></tr></table></figure>
<h2 id="泛型-Generics"><a href="#泛型-Generics" class="headerlink" title="泛型 (Generics)"></a>泛型 (Generics)</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Cat</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> name: <span class="type">String</span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dog</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> name: <span class="type">String</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Keeper</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">  <span class="keyword">var</span> name: <span class="type">String</span></div><div class="line">  <span class="keyword">var</span> morningAnimal: <span class="type">T</span></div><div class="line">  <span class="keyword">var</span> afternoonAnimal: <span class="type">T</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> jason = <span class="type">Keeper</span>(name: <span class="string">"Jason"</span>,</div><div class="line">                   morningAnimal: <span class="type">Cat</span>(name: <span class="string">"Whiskers"</span>),</div><div class="line">                   afternoonAnimal: <span class="type">Cat</span>(name: <span class="string">"Sleepy"</span>))</div><div class="line"></div><div class="line"><span class="comment">//Swift 的类型推断</span></div><div class="line"><span class="comment">//Array</span></div><div class="line"><span class="keyword">let</span> favoriteIntsInferred = <span class="type">Array</span>(arrayLiteral: <span class="number">8</span>, <span class="number">9</span>, <span class="number">42</span>)</div><div class="line"><span class="keyword">let</span> favoriteFloatsInferred = <span class="type">Array</span>&lt;<span class="type">Float</span>&gt;(arrayLiteral: <span class="number">8</span>, <span class="number">9</span>, <span class="number">42</span>)</div><div class="line"><span class="keyword">let</span> favoriteIntsExplicit2: <span class="type">Array</span>&lt;<span class="type">Int</span>&gt;     = [<span class="number">8</span>, <span class="number">9</span>, <span class="number">42</span>]</div><div class="line"><span class="keyword">let</span> favoriteIntsInferred2: <span class="type">Array</span>          = [<span class="number">8</span>, <span class="number">9</span>, <span class="number">42</span>]</div><div class="line"><span class="keyword">let</span> favoriteFloatsInferred2: <span class="type">Array</span>&lt;<span class="type">Float</span>&gt; = [<span class="number">8</span>, <span class="number">9</span>, <span class="number">42</span>]</div><div class="line"></div><div class="line"><span class="comment">//Dictionary</span></div><div class="line"><span class="keyword">let</span> intNames: <span class="type">Dictionary</span>&lt;<span class="type">Int</span>, <span class="type">String</span>&gt; = [<span class="number">42</span>: <span class="string">"forty-two"</span>]</div><div class="line"> <span class="keyword">let</span> intNames2: [<span class="type">Int</span>: <span class="type">String</span>] = [<span class="number">42</span>: <span class="string">"forty-two"</span>, <span class="number">7</span>: <span class="string">"seven"</span>]</div><div class="line"><span class="keyword">let</span> intNames3 = [<span class="number">42</span>: <span class="string">"forty-two"</span>, <span class="number">7</span>: <span class="string">"seven"</span>]</div><div class="line"></div><div class="line"><span class="comment">//Optional</span></div><div class="line"><span class="keyword">var</span> birthdate: <span class="type">Optional</span>&lt;<span class="type">NSDate</span>&gt; = <span class="type">Optional</span>&lt;<span class="type">NSDate</span>&gt;.<span class="type">None</span></div><div class="line"><span class="keyword">if</span> birthdate == <span class="type">Optional</span>&lt;<span class="type">NSDate</span>&gt;.<span class="type">None</span> &#123;</div><div class="line">  <span class="comment">// no birthdate</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//等价于</span></div><div class="line"><span class="keyword">var</span> birthdate: <span class="type">NSDate</span>? = <span class="literal">nil</span></div><div class="line"><span class="keyword">if</span> birthdate == <span class="literal">nil</span> &#123;</div><div class="line">  <span class="comment">// no birthdate</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//泛型函数</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">swapped</span>&lt;T, U&gt;<span class="params">(x: T, <span class="number">_</span> y: U)</span></span> -&gt; (<span class="type">U</span>, <span class="type">T</span>) &#123;</div><div class="line">  <span class="keyword">return</span> (y, x)</div><div class="line">&#125;</div><div class="line">swapped(<span class="number">33</span>, <span class="string">"Jay"</span>)  <span class="comment">// returns ("Jay", 33)</span></div></pre></td></tr></table></figure>
<h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"><span class="comment">//map</span></div><div class="line"><span class="keyword">let</span> animals = [<span class="string">"cat"</span>, <span class="string">"dog"</span>, <span class="string">"sheep"</span>, <span class="string">"dolphin"</span>, <span class="string">"tiger"</span>]</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">capitalize</span><span class="params">(s: String)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">  <span class="keyword">return</span> s.uppercaseString</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">characterForCharacterName</span><span class="params">(<span class="built_in">c</span>: String)</span></span> -&gt; <span class="type">Character</span> &#123;</div><div class="line">  <span class="keyword">let</span> curlyBracedCharacterName = <span class="string">"\\N&#123;<span class="subst">\(<span class="built_in">c</span>)</span>&#125;"</span></div><div class="line">  <span class="keyword">let</span> charStr = curlyBracedCharacterName.stringByApplyingTransform(</div><div class="line">    <span class="type">NSStringTransformToUnicodeName</span>, <span class="built_in">reverse</span>: <span class="literal">true</span>)</div><div class="line">  <span class="keyword">return</span> charStr!.characters.first!</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> uppercaseAnimals = animals.<span class="built_in">map</span>(capitalize)</div><div class="line"><span class="keyword">let</span> animalEmojis = uppercaseAnimals.<span class="built_in">map</span>(characterForCharacterName)</div><div class="line"></div><div class="line"><span class="keyword">let</span> uppercaseAnimals4 = animals.<span class="built_in">map</span>(&#123; $<span class="number">0</span>.uppercaseString &#125;)</div><div class="line"></div><div class="line"><span class="comment">//filter</span></div><div class="line"><span class="keyword">let</span> threeCharacterAnimals = animals.<span class="built_in">filter</span>() &#123;</div><div class="line">  $<span class="number">0</span>.characters.<span class="built_in">count</span> == <span class="number">3</span></div><div class="line">&#125;</div><div class="line">threeCharacterAnimals <span class="comment">// =&gt; ["cat", "dog"]</span></div><div class="line"></div><div class="line"><span class="comment">//reduce</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(items: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">  <span class="keyword">return</span> items.<span class="built_in">reduce</span>(<span class="number">0</span>, combine: +)</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> total = sum([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line">total <span class="comment">// =&gt; (((0 + 1) + 2) + 3) == 6</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">concatenate</span><span class="params">(items: [String])</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">  <span class="keyword">return</span> items.<span class="built_in">reduce</span>(<span class="string">""</span>, combine: +)</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> phrase = concatenate([<span class="string">"Hello"</span>,<span class="string">" "</span>,<span class="string">"World"</span>])</div><div class="line">phrase <span class="comment">// =&gt; ((("" + "Hello") + " ") + "World") == "Hello World"</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;闲暇学习Swift记的笔记，后有时间会持续更新，查漏补缺…😀&lt;/p&gt;
    
    </summary>
    
      <category term="Notes" scheme="https://coderdotcool.github.io/categories/Notes/"/>
    
    
      <category term="swift" scheme="https://coderdotcool.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Git笔记</title>
    <link href="https://coderdotcool.github.io/Notes/Git%E7%AC%94%E8%AE%B0.html"/>
    <id>https://coderdotcool.github.io/Notes/Git笔记.html</id>
    <published>2016-05-19T07:01:27.000Z</published>
    <updated>2018-02-02T09:22:25.231Z</updated>
    
    <content type="html"><![CDATA[<p>经常会忘git的一些命令，就整理了此份笔记供以后查找方便，会持续更新…</p>
<a id="more"></a>
<h1 id="初级"><a href="#初级" class="headerlink" title="初级"></a>初级</h1><h2 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h2><p>初始化一个空仓库</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init</div></pre></td></tr></table></figure>
<h2 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h2><p>配置「用户名」和「邮箱」</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git config --global user.name <span class="string">"docoder"</span></div><div class="line">git config --global user.email <span class="string">"docoder@163.com"</span></div><div class="line">git config —list</div><div class="line">git config user.email</div></pre></td></tr></table></figure>
 <!-- more -->
<h2 id="git-help"><a href="#git-help" class="headerlink" title="git help"></a>git help</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">help</span> commit</div></pre></td></tr></table></figure>
<h2 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h2><ul>
<li>untracked : 新增的文件，Git 不知道它的存在</li>
<li>not staged : 被索引过又被修改了的文件</li>
<li>staged : 通过 git add 后被即将被提交的文件</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git status</div></pre></td></tr></table></figure>
<h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">log</span></div><div class="line">git <span class="built_in">log</span> --oneline</div><div class="line">git <span class="built_in">log</span> --oneline --decorate</div></pre></td></tr></table></figure>
<h2 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h2><p>用 ! 来对模式取反</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">*.a</div><div class="line">!lib.a</div></pre></td></tr></table></figure>
<h2 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git add README</div><div class="line">git add --all .</div><div class="line">git add .</div><div class="line">git add -A</div></pre></td></tr></table></figure>
<h2 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">git tag new_tag</div><div class="line">git tag <span class="_">-d</span> deleteTag</div><div class="line"></div><div class="line"><span class="comment">#git push 命令默认是不会 push Tags 的，需要加参数。</span></div><div class="line">git push --tags</div><div class="line"></div><div class="line"><span class="comment">#添加远程 Tag 0.0.2</span></div><div class="line">git push origin 0.0.2</div><div class="line"><span class="comment">#删除远程 Tag 0.0.1</span></div><div class="line">git push origin :0.0.1</div></pre></td></tr></table></figure>
<h2 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git rm deleteme.js</div><div class="line"></div><div class="line"><span class="comment">#从 staging area 中移除出来，但不删除文件</span></div><div class="line">git rm deleteme.js --cached</div></pre></td></tr></table></figure>
<h2 id="git-mv"><a href="#git-mv" class="headerlink" title="git mv"></a>git mv</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git mv oldfile.txt newfile.txt</div><div class="line">git mv *.html src/</div></pre></td></tr></table></figure>
<h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git merge feature_branch</div></pre></td></tr></table></figure>
<h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">git commit -m <span class="string">"Add README"</span></div><div class="line">git commit .</div><div class="line">git commit <span class="_">-a</span></div><div class="line">git commit -am <span class="string">"This is our first commit"</span></div><div class="line"></div><div class="line"><span class="comment">#追加提交</span></div><div class="line">git commit --amend</div><div class="line"><span class="comment">#修改提交日期</span></div><div class="line">git commit -m <span class="string">"Commit your changes with the future date"</span> --date <span class="string">'2018-04-05 23:59:59'</span></div></pre></td></tr></table></figure>
<h2 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">git branch test_branch</div><div class="line"></div><div class="line">git checkout -b my_branch</div><div class="line"></div><div class="line"><span class="comment">#删除分支</span></div><div class="line">git branch <span class="_">-d</span> delete_branch</div><div class="line"></div><div class="line"><span class="comment">#有时忘记开新的分支，就修改并提交了代码。开分支的时候默认是基于最新的一次提交的，但我们也可以指定参数使其基于任一次提交。</span></div><div class="line">git branch test_branch HEAD~1</div></pre></td></tr></table></figure>
<h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h2><p>remote 对应远端仓库 </p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git remote add origin https://github.com/docoder/docoder.github.io</div><div class="line">git remote</div><div class="line">git remote -v</div><div class="line">git remote rm origin</div></pre></td></tr></table></figure>
<h2 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/docoder/docoder.github.io</div><div class="line">git <span class="built_in">clone</span> https://github.com/docoder/docoder.github.io myname.github.io</div></pre></td></tr></table></figure>
<h2 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">git checkout config.js</div><div class="line"></div><div class="line">git checkout -b my_branch</div><div class="line"></div><div class="line"><span class="comment">#checkout tag 和分支没有什么区别</span></div><div class="line">git checkout v1.2</div><div class="line"></div><div class="line"><span class="comment">#当存在同名的 tag 和分支时,分支优先级高，所以要显式地告诉 git 我们是要切换到 tag</span></div><div class="line">git checkout tags/v1.2</div></pre></td></tr></table></figure>
<h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#用 fetch 命令把代码拿下来,但并不合并到本地仓库</span></div><div class="line">git fetch origin</div></pre></td></tr></table></figure>
<h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h2><p>将别人提交的代码，拉到本地</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull origin master</div></pre></td></tr></table></figure>
<h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git diff</div></pre></td></tr></table></figure>
<h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#把分支 push 到远程仓库中去</span></div><div class="line">git push origin test_branch</div></pre></td></tr></table></figure>
<h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git reset to_commit_second.js</div><div class="line"></div><div class="line"><span class="comment">#`HEAD~1` 倒数第二的位置</span></div><div class="line"><span class="comment">#`--soft` 把变更保持在 staging area</span></div><div class="line">git reset HEAD~1 --soft</div></pre></td></tr></table></figure>
<h1 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h1><h2 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h2><p>把当前未提交的改动「复制」到另一个地方暂存起来，待要恢复的时候执行 <code>git stash pop</code> 即可</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git stash</div><div class="line">git stash pop</div></pre></td></tr></table></figure>
<h2 id="git-add-1"><a href="#git-add-1" class="headerlink" title="git add"></a>git add</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Open the diff vs. the index in an editor and let the user edit it. After the editor was closed, adjust the hunk headers and apply the patch to the index.</span></div><div class="line">git add <span class="_">-e</span></div></pre></td></tr></table></figure>
<h2 id="git-merge-1"><a href="#git-merge-1" class="headerlink" title="git merge"></a>git merge</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#将long-feature-branch的所有commit 合成一个commit 到本分支</span></div><div class="line">git merge long-feature-branch --squash</div><div class="line">	git commit</div><div class="line">	</div><div class="line">	</div><div class="line"><span class="comment">#解决冲突</span></div><div class="line">git merge mybranch</div><div class="line">	<span class="comment">#(CONFLICT (content): Merge conflict in poem.txt)</span></div><div class="line">	vim poem.txt</div><div class="line">	<span class="comment">#(解决冲突的地方为你想要的正确的代码)</span></div><div class="line">	git add poem.txt</div><div class="line">	git commit</div><div class="line">	<span class="comment">#(可以修改message也可以不修改，保存)</span></div></pre></td></tr></table></figure>
<h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">git rebase</div><div class="line"></div><div class="line"><span class="comment">#将feature分支rebase到master上</span></div><div class="line">git rebase master feature</div><div class="line"></div><div class="line"><span class="comment">#修改 commit message</span></div><div class="line">git rebase -i HEAD~~ </div><div class="line">	<span class="comment">#(将要修改的commit的前面的 pick 改成 edit 后保存)</span></div><div class="line">	git commit --amend</div><div class="line">	<span class="comment">#(修改 commit message 后保存)</span></div><div class="line">	git rebase --continue</div><div class="line">	</div><div class="line"><span class="comment">#合并commit</span></div><div class="line">git rebase -i HEAD~4</div><div class="line">	<span class="comment">#(将要合并的commit的前面的 pick 都改成 squash 后保存 )</span></div><div class="line">	<span class="comment">#(可以修改message也可以不修改，保存)</span></div><div class="line"></div><div class="line"><span class="comment">#拆分commit</span></div><div class="line">git rebase -i HEAD^</div><div class="line">	<span class="comment">#(将`updated README formatting and added blame`拆分为：第一次为 `updated README formatting`，第二次为 `added blame`)</span></div><div class="line">	<span class="comment">#(将要拆分的commit的前面的 pick 改成 edit 后保存 )</span></div><div class="line">	git add README</div><div class="line">	git commit -m <span class="string">'updated README formatting'</span></div><div class="line">	git add lib/simplegit.js</div><div class="line">	git commit -m <span class="string">'added blame'</span></div><div class="line">	git rebase --continue</div><div class="line"></div><div class="line"><span class="comment">#调整commit的顺序</span></div><div class="line">git rebase -i HEAD~3</div><div class="line">	<span class="comment">#(将 pick 的 commit 和其 message 的顺序改成你的要求，后保存)</span></div></pre></td></tr></table></figure>
<h2 id="git-cherry-pick"><a href="#git-cherry-pick" class="headerlink" title="git cherry-pick"></a>git cherry-pick</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#将其他分支的提交（ca32a6d）拿过来到本分支</span></div><div class="line">git cherry-pick ca32a6d</div></pre></td></tr></table></figure>
<h2 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#撤销 某次操作，此次操作之前和之后的commit和history都会保留，并且把这次撤销作为一次最新的提交</span></div><div class="line"><span class="comment">#撤销前一次 commit</span></div><div class="line">git revert HEAD</div><div class="line"><span class="comment">#撤销前前一次 commit</span></div><div class="line">git revert HEAD^</div><div class="line"><span class="comment">#撤销指定的commit，撤销也会作为一次提交进行保存</span></div><div class="line">git revert 7ab60ed</div></pre></td></tr></table></figure>
<h2 id="git-grep"><a href="#git-grep" class="headerlink" title="git grep"></a>git grep</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#查找每个包含有字符串`searchStr`的地方</span></div><div class="line">git grep searchStr</div><div class="line"></div><div class="line"><span class="comment">#`-n` 显示行号</span></div><div class="line">git grep -n searchStr</div><div class="line"></div><div class="line"><span class="comment">#`--name-only` 只显示文件名</span></div><div class="line">git grep --name-only searchStr</div><div class="line"></div><div class="line"><span class="comment">#查找仓库里某个特定版本(标签名tag reference:`v1.5.0`)里的内容</span></div><div class="line">git grep searchStr v1.5.0</div><div class="line"></div><div class="line"><span class="comment">#`-c` 查看每个文件里有多少行匹配的内容 (统计每个文件有多少的TODO)</span></div><div class="line">git grep -c TODO </div><div class="line"></div><div class="line"><span class="comment">#哪个地方定义了宏(`#define`):`SORT_DIRENT`</span></div><div class="line">git grep <span class="_">-e</span> <span class="string">'#define'</span> --and <span class="_">-e</span> SORT_DIRENT</div><div class="line"></div><div class="line"><span class="comment">#名字中含有`PATH`或是`MAX`的宏(`#define`)定义</span></div><div class="line">git grep <span class="_">-e</span> <span class="string">'#define'</span> --and \( <span class="_">-e</span> PATH <span class="_">-e</span> MAX \)</div><div class="line"></div><div class="line"><span class="comment">#哪个地方含有`MAX`或是`MIN`</span></div><div class="line">git grep --all-match <span class="_">-e</span> MAX <span class="_">-e</span> MIN</div></pre></td></tr></table></figure>
<h2 id="git-reflog"><a href="#git-reflog" class="headerlink" title="git reflog"></a>git reflog</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git reflog</div><div class="line"></div><div class="line"><span class="comment">#Restore the deleted commit</span></div><div class="line">git reflog</div><div class="line">	git reset --hard 18cbf98</div></pre></td></tr></table></figure>
<h2 id="git-submodule"><a href="#git-submodule" class="headerlink" title="git submodule"></a>git submodule</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git submodule add https://github.com/jackmaney/githug-include-me ./githug-include-me</div></pre></td></tr></table></figure>
<h2 id="git-blame"><a href="#git-blame" class="headerlink" title="git blame"></a>git blame</h2><p>快速找到某行代码最后的修改者,追责</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git blame config.js</div></pre></td></tr></table></figure>
<h2 id="git-repack"><a href="#git-repack" class="headerlink" title="git repack"></a>git repack</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Optimise how your repository is packaged ensuring that redundant packs are removed.</span></div><div class="line">git repack <span class="_">-d</span></div></pre></td></tr></table></figure>
<h2 id="git-bisect"><a href="#git-bisect" class="headerlink" title="git bisect"></a>git bisect</h2><p>Bisect 就是利用二分查找发来查找在你的某一分支中到底是哪一次提交引入了特定的变更(通常为检测bug)</p>
<p>首先，要用方法检测出一个给定的提交点是不是有 bug，可以写个测试代码或脚本</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#开始 bisect</span></div><div class="line">git bisect start</div><div class="line"><span class="comment">#没有得到想要的结果（就是没有任何输出），所以我们把它标记为坏的，作为终点。</span></div><div class="line">git bisect bad</div><div class="line"></div><div class="line"><span class="comment">#指定一个好的提交点：假设第一个提交点（80a9b3d）是没有 bug 的，作为起点。</span></div><div class="line">git bisect good 80a9b3d</div><div class="line"></div><div class="line"><span class="comment">#运行自动化脚本 `test.sh`</span></div><div class="line">	git bisect run ./test.sh</div><div class="line"><span class="comment">#或 运行make脚本 `test`</span></div><div class="line">	git bisect run make <span class="built_in">test</span></div><div class="line"><span class="comment">#(脚本，正确的返回 0，反之返回 1)</span></div><div class="line"><span class="comment">#如：test.sh:</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [[ `grep 1013 file.txt` ]]; <span class="keyword">then</span></div><div class="line">  <span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">else</span></div><div class="line">  <span class="built_in">exit</span> 0</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<h2 id="git-filter-branch"><a href="#git-filter-branch" class="headerlink" title="git filter-branch"></a>git filter-branch</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#让trunk子目录成为每一次提交的新的项目根目录</span></div><div class="line">$ git filter-branch --subdirectory-filter trunk HEAD</div><div class="line"></div><div class="line"><span class="comment">#全局性地更换电子邮件地址</span></div><div class="line">git filter-branch --commit-filter <span class="string">' </span></div><div class="line">	if [ "$GIT_AUTHOR_EMAIL" = "schacon@localhost" ]; </div><div class="line">	then </div><div class="line">		GIT_AUTHOR_NAME="Scott Chacon";</div><div class="line">		GIT_AUTHOR_EMAIL="schacon@example.com"; </div><div class="line">		git commit-tree "$@"; </div><div class="line">	else </div><div class="line">		git commit-tree "$@"; </div><div class="line">	fi' HEAD</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经常会忘git的一些命令，就整理了此份笔记供以后查找方便，会持续更新…&lt;/p&gt;
    
    </summary>
    
      <category term="Notes" scheme="https://coderdotcool.github.io/categories/Notes/"/>
    
    
      <category term="git" scheme="https://coderdotcool.github.io/tags/git/"/>
    
  </entry>
  
</feed>
